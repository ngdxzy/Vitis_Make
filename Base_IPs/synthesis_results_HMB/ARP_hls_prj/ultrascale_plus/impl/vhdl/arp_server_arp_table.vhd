-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity arp_server_arp_table is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    myIpAddress_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    myIpAddress_empty_n : IN STD_LOGIC;
    myIpAddress_read : OUT STD_LOGIC;
    macIpEncode_i_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    macIpEncode_i_empty_n : IN STD_LOGIC;
    macIpEncode_i_read : OUT STD_LOGIC;
    arpTableInsertFifo_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    arpTableInsertFifo_empty_n : IN STD_LOGIC;
    arpTableInsertFifo_read : OUT STD_LOGIC;
    macIpEncode_rsp_i_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    macIpEncode_rsp_i_full_n : IN STD_LOGIC;
    macIpEncode_rsp_i_write : OUT STD_LOGIC;
    arpRequestFifo_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    arpRequestFifo_full_n : IN STD_LOGIC;
    arpRequestFifo_write : OUT STD_LOGIC;
    arpTable_macAddress_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    arpTable_macAddress_ce0 : OUT STD_LOGIC;
    arpTable_macAddress_we0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    arpTable_macAddress_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    arpTable_macAddress_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    arpTable_ipAddress_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    arpTable_ipAddress_ce0 : OUT STD_LOGIC;
    arpTable_ipAddress_we0 : OUT STD_LOGIC;
    arpTable_ipAddress_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    arpTable_valid_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    arpTable_valid_ce0 : OUT STD_LOGIC;
    arpTable_valid_we0 : OUT STD_LOGIC;
    arpTable_valid_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    arpTable_valid_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of arp_server_arp_table is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_3F : STD_LOGIC_VECTOR (7 downto 0) := "00111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal tmp_i_nbreadreq_fu_118_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_i_nbreadreq_fu_126_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op36_read_state1 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal tmp_i_reg_337 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_i_reg_341 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op68_write_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal tmp_i_reg_337_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_i_reg_341_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal currEntry_valid_V_reg_380 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op71_write_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal myIpAddress_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal arpTableInsertFifo_blk_n : STD_LOGIC;
    signal macIpEncode_i_blk_n : STD_LOGIC;
    signal arpRequestFifo_blk_n : STD_LOGIC;
    signal macIpEncode_rsp_i_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal query_ip_V_reg_345 : STD_LOGIC_VECTOR (31 downto 0);
    signal query_ip_V_reg_345_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal currEntry_ipAddress_V_reg_365 : STD_LOGIC_VECTOR (31 downto 0);
    signal currEntry_ipAddress_V_reg_365_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln708_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln708_reg_370 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln708_reg_370_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal currEntry_valid_V_fu_318_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln708_1_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal xor_ln1049_fu_214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln1049_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1049_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_i_fu_232_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_i_fu_242_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln232_fu_252_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal currEntry_macAddress_V_fu_266_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_fu_285_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_i_fu_298_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal currEntry_macAddress_V_1_fu_314_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_9_i_fu_322_p4 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_60 : BOOLEAN;
    signal ap_enable_state1_pp0_iter0_stage0 : BOOLEAN;
    signal ap_predicate_op47_load_state1 : BOOLEAN;
    signal ap_enable_operation_47 : BOOLEAN;
    signal ap_predicate_op63_load_state2 : BOOLEAN;
    signal ap_enable_operation_63 : BOOLEAN;
    signal ap_enable_state2_pp0_iter1_stage0 : BOOLEAN;
    signal ap_predicate_op45_load_state1 : BOOLEAN;
    signal ap_enable_operation_45 : BOOLEAN;
    signal ap_predicate_op61_load_state2 : BOOLEAN;
    signal ap_enable_operation_61 : BOOLEAN;
    signal ap_enable_operation_58 : BOOLEAN;
    signal ap_enable_operation_70 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_140 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_nbreadreq_fu_118_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                currEntry_ipAddress_V_reg_365 <= arpTableInsertFifo_dout(95 downto 64);
                    zext_ln708_reg_370(7 downto 0) <= zext_ln708_fu_308_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                currEntry_ipAddress_V_reg_365_pp0_iter1_reg <= currEntry_ipAddress_V_reg_365;
                query_ip_V_reg_345_pp0_iter1_reg <= query_ip_V_reg_345;
                tmp_7_i_reg_341_pp0_iter1_reg <= tmp_7_i_reg_341;
                tmp_i_reg_337 <= tmp_i_nbreadreq_fu_118_p3;
                tmp_i_reg_337_pp0_iter1_reg <= tmp_i_reg_337;
                    zext_ln708_reg_370_pp0_iter1_reg(7 downto 0) <= zext_ln708_reg_370(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_i_reg_341 = ap_const_lv1_1) and (tmp_i_reg_337 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                currEntry_valid_V_reg_380 <= currEntry_valid_V_fu_318_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op36_read_state1 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                query_ip_V_reg_345 <= macIpEncode_i_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_nbreadreq_fu_118_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_7_i_reg_341 <= tmp_7_i_nbreadreq_fu_126_p3;
            end if;
        end if;
    end process;
    zext_ln708_reg_370(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln708_reg_370_pp0_iter1_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln1049_fu_220_p2 <= (xor_ln1049_fu_214_p2 and p_read1);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, myIpAddress_empty_n, macIpEncode_i_empty_n, tmp_i_nbreadreq_fu_118_p3, ap_predicate_op36_read_state1, arpTableInsertFifo_empty_n, ap_done_reg, macIpEncode_rsp_i_full_n, ap_predicate_op68_write_state2, arpRequestFifo_full_n, ap_predicate_op71_write_state3)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op71_write_state3 = ap_const_boolean_1) and (arpRequestFifo_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_predicate_op68_write_state2 = ap_const_boolean_1) and (macIpEncode_rsp_i_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or (myIpAddress_empty_n = ap_const_logic_0) or ((arpTableInsertFifo_empty_n = ap_const_logic_0) and (tmp_i_nbreadreq_fu_118_p3 = ap_const_lv1_1)) or ((ap_predicate_op36_read_state1 = ap_const_boolean_1) and (macIpEncode_i_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, myIpAddress_empty_n, macIpEncode_i_empty_n, tmp_i_nbreadreq_fu_118_p3, ap_predicate_op36_read_state1, arpTableInsertFifo_empty_n, ap_done_reg, macIpEncode_rsp_i_full_n, ap_predicate_op68_write_state2, arpRequestFifo_full_n, ap_predicate_op71_write_state3)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op71_write_state3 = ap_const_boolean_1) and (arpRequestFifo_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_predicate_op68_write_state2 = ap_const_boolean_1) and (macIpEncode_rsp_i_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or (myIpAddress_empty_n = ap_const_logic_0) or ((arpTableInsertFifo_empty_n = ap_const_logic_0) and (tmp_i_nbreadreq_fu_118_p3 = ap_const_lv1_1)) or ((ap_predicate_op36_read_state1 = ap_const_boolean_1) and (macIpEncode_i_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, myIpAddress_empty_n, macIpEncode_i_empty_n, tmp_i_nbreadreq_fu_118_p3, ap_predicate_op36_read_state1, arpTableInsertFifo_empty_n, ap_done_reg, macIpEncode_rsp_i_full_n, ap_predicate_op68_write_state2, arpRequestFifo_full_n, ap_predicate_op71_write_state3)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op71_write_state3 = ap_const_boolean_1) and (arpRequestFifo_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_predicate_op68_write_state2 = ap_const_boolean_1) and (macIpEncode_rsp_i_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or (myIpAddress_empty_n = ap_const_logic_0) or ((arpTableInsertFifo_empty_n = ap_const_logic_0) and (tmp_i_nbreadreq_fu_118_p3 = ap_const_lv1_1)) or ((ap_predicate_op36_read_state1 = ap_const_boolean_1) and (macIpEncode_i_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(myIpAddress_empty_n, macIpEncode_i_empty_n, tmp_i_nbreadreq_fu_118_p3, ap_predicate_op36_read_state1, arpTableInsertFifo_empty_n, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_done_reg = ap_const_logic_1) or (myIpAddress_empty_n = ap_const_logic_0) or ((arpTableInsertFifo_empty_n = ap_const_logic_0) and (tmp_i_nbreadreq_fu_118_p3 = ap_const_lv1_1)) or ((ap_predicate_op36_read_state1 = ap_const_boolean_1) and (macIpEncode_i_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(macIpEncode_rsp_i_full_n, ap_predicate_op68_write_state2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op68_write_state2 = ap_const_boolean_1) and (macIpEncode_rsp_i_full_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(arpRequestFifo_full_n, ap_predicate_op71_write_state3)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((ap_predicate_op71_write_state3 = ap_const_boolean_1) and (arpRequestFifo_full_n = ap_const_logic_0));
    end process;


    ap_condition_140_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
                ap_condition_140 <= ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_45_assign_proc : process(ap_predicate_op45_load_state1)
    begin
                ap_enable_operation_45 <= (ap_predicate_op45_load_state1 = ap_const_boolean_1);
    end process;


    ap_enable_operation_47_assign_proc : process(ap_predicate_op47_load_state1)
    begin
                ap_enable_operation_47 <= (ap_predicate_op47_load_state1 = ap_const_boolean_1);
    end process;


    ap_enable_operation_58_assign_proc : process(tmp_i_nbreadreq_fu_118_p3)
    begin
                ap_enable_operation_58 <= (tmp_i_nbreadreq_fu_118_p3 = ap_const_lv1_1);
    end process;


    ap_enable_operation_60_assign_proc : process(tmp_i_nbreadreq_fu_118_p3)
    begin
                ap_enable_operation_60 <= (tmp_i_nbreadreq_fu_118_p3 = ap_const_lv1_1);
    end process;


    ap_enable_operation_61_assign_proc : process(ap_predicate_op61_load_state2)
    begin
                ap_enable_operation_61 <= (ap_predicate_op61_load_state2 = ap_const_boolean_1);
    end process;


    ap_enable_operation_63_assign_proc : process(ap_predicate_op63_load_state2)
    begin
                ap_enable_operation_63 <= (ap_predicate_op63_load_state2 = ap_const_boolean_1);
    end process;


    ap_enable_operation_70_assign_proc : process(tmp_i_reg_337)
    begin
                ap_enable_operation_70 <= (tmp_i_reg_337 = ap_const_lv1_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_enable_state1_pp0_iter0_stage0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0)
    begin
                ap_enable_state1_pp0_iter0_stage0 <= ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_enable_state2_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state2_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op36_read_state1_assign_proc : process(tmp_i_nbreadreq_fu_118_p3, tmp_7_i_nbreadreq_fu_126_p3)
    begin
                ap_predicate_op36_read_state1 <= ((tmp_7_i_nbreadreq_fu_126_p3 = ap_const_lv1_1) and (tmp_i_nbreadreq_fu_118_p3 = ap_const_lv1_0));
    end process;


    ap_predicate_op45_load_state1_assign_proc : process(tmp_i_nbreadreq_fu_118_p3, tmp_7_i_nbreadreq_fu_126_p3)
    begin
                ap_predicate_op45_load_state1 <= ((tmp_7_i_nbreadreq_fu_126_p3 = ap_const_lv1_1) and (tmp_i_nbreadreq_fu_118_p3 = ap_const_lv1_0));
    end process;


    ap_predicate_op47_load_state1_assign_proc : process(tmp_i_nbreadreq_fu_118_p3, tmp_7_i_nbreadreq_fu_126_p3)
    begin
                ap_predicate_op47_load_state1 <= ((tmp_7_i_nbreadreq_fu_126_p3 = ap_const_lv1_1) and (tmp_i_nbreadreq_fu_118_p3 = ap_const_lv1_0));
    end process;


    ap_predicate_op61_load_state2_assign_proc : process(tmp_i_reg_337, tmp_7_i_reg_341)
    begin
                ap_predicate_op61_load_state2 <= ((tmp_7_i_reg_341 = ap_const_lv1_1) and (tmp_i_reg_337 = ap_const_lv1_0));
    end process;


    ap_predicate_op63_load_state2_assign_proc : process(tmp_i_reg_337, tmp_7_i_reg_341)
    begin
                ap_predicate_op63_load_state2 <= ((tmp_7_i_reg_341 = ap_const_lv1_1) and (tmp_i_reg_337 = ap_const_lv1_0));
    end process;


    ap_predicate_op68_write_state2_assign_proc : process(tmp_i_reg_337, tmp_7_i_reg_341)
    begin
                ap_predicate_op68_write_state2 <= ((tmp_7_i_reg_341 = ap_const_lv1_1) and (tmp_i_reg_337 = ap_const_lv1_0));
    end process;


    ap_predicate_op71_write_state3_assign_proc : process(tmp_i_reg_337_pp0_iter1_reg, tmp_7_i_reg_341_pp0_iter1_reg, currEntry_valid_V_reg_380)
    begin
                ap_predicate_op71_write_state3 <= ((currEntry_valid_V_reg_380 = ap_const_lv1_0) and (tmp_7_i_reg_341_pp0_iter1_reg = ap_const_lv1_1) and (tmp_i_reg_337_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    arpRequestFifo_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, arpRequestFifo_full_n, ap_predicate_op71_write_state3, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op71_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            arpRequestFifo_blk_n <= arpRequestFifo_full_n;
        else 
            arpRequestFifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    arpRequestFifo_din <= query_ip_V_reg_345_pp0_iter1_reg;

    arpRequestFifo_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op71_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op71_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            arpRequestFifo_write <= ap_const_logic_1;
        else 
            arpRequestFifo_write <= ap_const_logic_0;
        end if; 
    end process;


    arpTableInsertFifo_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, tmp_i_nbreadreq_fu_118_p3, arpTableInsertFifo_empty_n, ap_done_reg, ap_block_pp0_stage0)
    begin
        if (((ap_done_reg = ap_const_logic_0) and (tmp_i_nbreadreq_fu_118_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            arpTableInsertFifo_blk_n <= arpTableInsertFifo_empty_n;
        else 
            arpTableInsertFifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    arpTableInsertFifo_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, tmp_i_nbreadreq_fu_118_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_i_nbreadreq_fu_118_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            arpTableInsertFifo_read <= ap_const_logic_1;
        else 
            arpTableInsertFifo_read <= ap_const_logic_0;
        end if; 
    end process;

    arpTable_ipAddress_address0 <= zext_ln708_reg_370_pp0_iter1_reg(8 - 1 downto 0);

    arpTable_ipAddress_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            arpTable_ipAddress_ce0 <= ap_const_logic_1;
        else 
            arpTable_ipAddress_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arpTable_ipAddress_d0 <= currEntry_ipAddress_V_reg_365_pp0_iter1_reg;

    arpTable_ipAddress_we0_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_i_reg_337_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_i_reg_337_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            arpTable_ipAddress_we0 <= ap_const_logic_1;
        else 
            arpTable_ipAddress_we0 <= ap_const_logic_0;
        end if; 
    end process;


    arpTable_macAddress_address0_assign_proc : process(tmp_i_nbreadreq_fu_118_p3, tmp_7_i_nbreadreq_fu_126_p3, zext_ln708_fu_308_p1, zext_ln708_1_fu_260_p1, ap_condition_140)
    begin
        if ((ap_const_boolean_1 = ap_condition_140)) then
            if ((tmp_i_nbreadreq_fu_118_p3 = ap_const_lv1_1)) then 
                arpTable_macAddress_address0 <= zext_ln708_fu_308_p1(8 - 1 downto 0);
            elsif (((tmp_7_i_nbreadreq_fu_126_p3 = ap_const_lv1_1) and (tmp_i_nbreadreq_fu_118_p3 = ap_const_lv1_0))) then 
                arpTable_macAddress_address0 <= zext_ln708_1_fu_260_p1(8 - 1 downto 0);
            else 
                arpTable_macAddress_address0 <= "XXXXXXXX";
            end if;
        else 
            arpTable_macAddress_address0 <= "XXXXXXXX";
        end if; 
    end process;


    arpTable_macAddress_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_i_nbreadreq_fu_118_p3, tmp_7_i_nbreadreq_fu_126_p3, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((tmp_i_nbreadreq_fu_118_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((tmp_7_i_nbreadreq_fu_126_p3 = ap_const_lv1_1) and (tmp_i_nbreadreq_fu_118_p3 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            arpTable_macAddress_ce0 <= ap_const_logic_1;
        else 
            arpTable_macAddress_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arpTable_macAddress_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(currEntry_macAddress_V_fu_266_p1),64));

    arpTable_macAddress_we0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, tmp_i_nbreadreq_fu_118_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_i_nbreadreq_fu_118_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            arpTable_macAddress_we0 <= ap_const_lv8_3F;
        else 
            arpTable_macAddress_we0 <= ap_const_lv8_0;
        end if; 
    end process;


    arpTable_valid_address0_assign_proc : process(tmp_i_nbreadreq_fu_118_p3, tmp_7_i_nbreadreq_fu_126_p3, zext_ln708_fu_308_p1, zext_ln708_1_fu_260_p1, ap_condition_140)
    begin
        if ((ap_const_boolean_1 = ap_condition_140)) then
            if ((tmp_i_nbreadreq_fu_118_p3 = ap_const_lv1_1)) then 
                arpTable_valid_address0 <= zext_ln708_fu_308_p1(8 - 1 downto 0);
            elsif (((tmp_7_i_nbreadreq_fu_126_p3 = ap_const_lv1_1) and (tmp_i_nbreadreq_fu_118_p3 = ap_const_lv1_0))) then 
                arpTable_valid_address0 <= zext_ln708_1_fu_260_p1(8 - 1 downto 0);
            else 
                arpTable_valid_address0 <= "XXXXXXXX";
            end if;
        else 
            arpTable_valid_address0 <= "XXXXXXXX";
        end if; 
    end process;


    arpTable_valid_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, tmp_i_nbreadreq_fu_118_p3, tmp_7_i_nbreadreq_fu_126_p3, ap_block_pp0_stage0_11001)
    begin
        if ((((tmp_i_nbreadreq_fu_118_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((tmp_7_i_nbreadreq_fu_126_p3 = ap_const_lv1_1) and (tmp_i_nbreadreq_fu_118_p3 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            arpTable_valid_ce0 <= ap_const_logic_1;
        else 
            arpTable_valid_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    arpTable_valid_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_285_p3),8));

    arpTable_valid_we0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, tmp_i_nbreadreq_fu_118_p3, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_i_nbreadreq_fu_118_p3 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            arpTable_valid_we0 <= ap_const_logic_1;
        else 
            arpTable_valid_we0 <= ap_const_logic_0;
        end if; 
    end process;

    currEntry_macAddress_V_1_fu_314_p1 <= arpTable_macAddress_q0(48 - 1 downto 0);
    currEntry_macAddress_V_fu_266_p1 <= arpTableInsertFifo_dout(48 - 1 downto 0);
    currEntry_valid_V_fu_318_p1 <= arpTable_valid_q0(1 - 1 downto 0);
    icmp_ln1049_fu_226_p2 <= "1" when (and_ln1049_fu_220_p2 = ap_const_lv32_0) else "0";

    macIpEncode_i_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, macIpEncode_i_empty_n, ap_predicate_op36_read_state1, ap_done_reg, ap_block_pp0_stage0)
    begin
        if (((ap_done_reg = ap_const_logic_0) and (ap_predicate_op36_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            macIpEncode_i_blk_n <= macIpEncode_i_empty_n;
        else 
            macIpEncode_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    macIpEncode_i_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op36_read_state1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op36_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            macIpEncode_i_read <= ap_const_logic_1;
        else 
            macIpEncode_i_read <= ap_const_logic_0;
        end if; 
    end process;


    macIpEncode_rsp_i_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, macIpEncode_rsp_i_full_n, ap_predicate_op68_write_state2, ap_block_pp0_stage0)
    begin
        if (((ap_predicate_op68_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            macIpEncode_rsp_i_blk_n <= macIpEncode_rsp_i_full_n;
        else 
            macIpEncode_rsp_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    macIpEncode_rsp_i_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_i_fu_322_p4),128));

    macIpEncode_rsp_i_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op68_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op68_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            macIpEncode_rsp_i_write <= ap_const_logic_1;
        else 
            macIpEncode_rsp_i_write <= ap_const_logic_0;
        end if; 
    end process;


    myIpAddress_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, myIpAddress_empty_n, ap_done_reg, ap_block_pp0_stage0)
    begin
        if (((ap_done_reg = ap_const_logic_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            myIpAddress_blk_n <= myIpAddress_empty_n;
        else 
            myIpAddress_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    myIpAddress_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            myIpAddress_read <= ap_const_logic_1;
        else 
            myIpAddress_read <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_i_fu_298_p4 <= arpTableInsertFifo_dout(95 downto 88);
    select_ln232_fu_252_p3 <= 
        tmp_6_i_fu_232_p4 when (icmp_ln1049_fu_226_p2(0) = '1') else 
        tmp_8_i_fu_242_p4;
    tmp_6_i_fu_232_p4 <= macIpEncode_i_dout(31 downto 24);
    tmp_7_i_nbreadreq_fu_126_p3 <= (0=>(macIpEncode_i_empty_n), others=>'-');
    tmp_8_i_fu_242_p4 <= p_read(31 downto 24);
    tmp_9_i_fu_322_p4 <= ((currEntry_valid_V_fu_318_p1 & ap_const_lv16_0) & currEntry_macAddress_V_1_fu_314_p1);
    tmp_fu_285_p3 <= arpTableInsertFifo_dout(96 downto 96);
    tmp_i_nbreadreq_fu_118_p3 <= (0=>(arpTableInsertFifo_empty_n), others=>'-');
    xor_ln1049_fu_214_p2 <= (myIpAddress_dout xor macIpEncode_i_dout);
    zext_ln708_1_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln232_fu_252_p3),64));
    zext_ln708_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i_fu_298_p4),64));
end behav;
