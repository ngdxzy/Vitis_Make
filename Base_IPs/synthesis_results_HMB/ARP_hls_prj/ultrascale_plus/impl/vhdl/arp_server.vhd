-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity arp_server is
generic (
    C_S_AXI_S_AXILITE_ADDR_WIDTH : INTEGER := 12;
    C_S_AXI_S_AXILITE_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_s_axilite_AWVALID : IN STD_LOGIC;
    s_axi_s_axilite_AWREADY : OUT STD_LOGIC;
    s_axi_s_axilite_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXILITE_ADDR_WIDTH-1 downto 0);
    s_axi_s_axilite_WVALID : IN STD_LOGIC;
    s_axi_s_axilite_WREADY : OUT STD_LOGIC;
    s_axi_s_axilite_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXILITE_DATA_WIDTH-1 downto 0);
    s_axi_s_axilite_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXILITE_DATA_WIDTH/8-1 downto 0);
    s_axi_s_axilite_ARVALID : IN STD_LOGIC;
    s_axi_s_axilite_ARREADY : OUT STD_LOGIC;
    s_axi_s_axilite_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXILITE_ADDR_WIDTH-1 downto 0);
    s_axi_s_axilite_RVALID : OUT STD_LOGIC;
    s_axi_s_axilite_RREADY : IN STD_LOGIC;
    s_axi_s_axilite_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_S_AXILITE_DATA_WIDTH-1 downto 0);
    s_axi_s_axilite_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_s_axilite_BVALID : OUT STD_LOGIC;
    s_axi_s_axilite_BREADY : IN STD_LOGIC;
    s_axi_s_axilite_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    arpDataIn_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    arpDataIn_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    arpDataIn_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
    arpDataIn_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    macIpEncode_req_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    arpDataOut_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    arpDataOut_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    arpDataOut_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    arpDataOut_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    macIpEncode_rsp_V_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    myMacAddress : IN STD_LOGIC_VECTOR (47 downto 0);
    myIpAddress : IN STD_LOGIC_VECTOR (31 downto 0);
    gatewayIP : IN STD_LOGIC_VECTOR (31 downto 0);
    networkMask : IN STD_LOGIC_VECTOR (31 downto 0);
    macIpEncode_req_V_TVALID : IN STD_LOGIC;
    macIpEncode_req_V_TREADY : OUT STD_LOGIC;
    macIpEncode_rsp_V_TVALID : OUT STD_LOGIC;
    macIpEncode_rsp_V_TREADY : IN STD_LOGIC;
    arpDataIn_TVALID : IN STD_LOGIC;
    arpDataIn_TREADY : OUT STD_LOGIC;
    arpDataOut_TVALID : OUT STD_LOGIC;
    arpDataOut_TREADY : IN STD_LOGIC );
end;


architecture behav of arp_server is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "arp_server_arp_server,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.100000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=3.812000,HLS_SYN_LAT=4,HLS_SYN_TPT=1,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=1580,HLS_SYN_LUT=1539,HLS_VERSION=2021_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal arp_scan_i : STD_LOGIC_VECTOR (0 downto 0);
    signal arpTable_valid_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal arpTable_macAddress_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_networkMask_c_channel : STD_LOGIC;
    signal networkMask_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_networkMask_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_networkMask_c_channel : STD_LOGIC;
    signal ap_channel_done_gatewayIP_c_channel : STD_LOGIC;
    signal gatewayIP_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_gatewayIP_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_gatewayIP_c_channel : STD_LOGIC;
    signal genARPDiscovery_U0_ap_start : STD_LOGIC;
    signal genARPDiscovery_U0_ap_done : STD_LOGIC;
    signal genARPDiscovery_U0_ap_continue : STD_LOGIC;
    signal genARPDiscovery_U0_ap_idle : STD_LOGIC;
    signal genARPDiscovery_U0_ap_ready : STD_LOGIC;
    signal genARPDiscovery_U0_macIpEncode_rsp_i_read : STD_LOGIC;
    signal genARPDiscovery_U0_macIpEncode_i_din : STD_LOGIC_VECTOR (31 downto 0);
    signal genARPDiscovery_U0_macIpEncode_i_write : STD_LOGIC;
    signal genARPDiscovery_U0_macIpEncode_req_V_TREADY : STD_LOGIC;
    signal genARPDiscovery_U0_macIpEncode_rsp_V_TDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal genARPDiscovery_U0_macIpEncode_rsp_V_TVALID : STD_LOGIC;
    signal genARPDiscovery_U0_arp_scan_o : STD_LOGIC_VECTOR (0 downto 0);
    signal genARPDiscovery_U0_arp_scan_o_ap_vld : STD_LOGIC;
    signal arp_pkg_receiver_U0_ap_start : STD_LOGIC;
    signal arp_pkg_receiver_U0_ap_done : STD_LOGIC;
    signal arp_pkg_receiver_U0_ap_continue : STD_LOGIC;
    signal arp_pkg_receiver_U0_ap_idle : STD_LOGIC;
    signal arp_pkg_receiver_U0_ap_ready : STD_LOGIC;
    signal arp_pkg_receiver_U0_myIpAddress_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal arp_pkg_receiver_U0_myIpAddress_c_write : STD_LOGIC;
    signal arp_pkg_receiver_U0_arpTableInsertFifo_din : STD_LOGIC_VECTOR (127 downto 0);
    signal arp_pkg_receiver_U0_arpTableInsertFifo_write : STD_LOGIC;
    signal arp_pkg_receiver_U0_arpReplyFifo_din : STD_LOGIC_VECTOR (255 downto 0);
    signal arp_pkg_receiver_U0_arpReplyFifo_write : STD_LOGIC;
    signal arp_pkg_receiver_U0_arpDataIn_TREADY : STD_LOGIC;
    signal arp_pkg_sender_U0_ap_start : STD_LOGIC;
    signal arp_pkg_sender_U0_ap_done : STD_LOGIC;
    signal arp_pkg_sender_U0_ap_continue : STD_LOGIC;
    signal arp_pkg_sender_U0_ap_idle : STD_LOGIC;
    signal arp_pkg_sender_U0_ap_ready : STD_LOGIC;
    signal arp_pkg_sender_U0_arpRequestFifo_read : STD_LOGIC;
    signal arp_pkg_sender_U0_arpReplyFifo_read : STD_LOGIC;
    signal arp_pkg_sender_U0_arpDataOut_TDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal arp_pkg_sender_U0_arpDataOut_TVALID : STD_LOGIC;
    signal arp_pkg_sender_U0_arpDataOut_TKEEP : STD_LOGIC_VECTOR (63 downto 0);
    signal arp_pkg_sender_U0_arpDataOut_TSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal arp_pkg_sender_U0_arpDataOut_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal arp_table_U0_ap_start : STD_LOGIC;
    signal arp_table_U0_ap_done : STD_LOGIC;
    signal arp_table_U0_ap_continue : STD_LOGIC;
    signal arp_table_U0_ap_idle : STD_LOGIC;
    signal arp_table_U0_ap_ready : STD_LOGIC;
    signal arp_table_U0_myIpAddress_read : STD_LOGIC;
    signal arp_table_U0_macIpEncode_i_read : STD_LOGIC;
    signal arp_table_U0_arpTableInsertFifo_read : STD_LOGIC;
    signal arp_table_U0_macIpEncode_rsp_i_din : STD_LOGIC_VECTOR (127 downto 0);
    signal arp_table_U0_macIpEncode_rsp_i_write : STD_LOGIC;
    signal arp_table_U0_arpRequestFifo_din : STD_LOGIC_VECTOR (31 downto 0);
    signal arp_table_U0_arpRequestFifo_write : STD_LOGIC;
    signal arp_table_U0_arpTable_macAddress_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal arp_table_U0_arpTable_macAddress_ce0 : STD_LOGIC;
    signal arp_table_U0_arpTable_macAddress_we0 : STD_LOGIC_VECTOR (7 downto 0);
    signal arp_table_U0_arpTable_macAddress_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal arp_table_U0_arpTable_ipAddress_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal arp_table_U0_arpTable_ipAddress_ce0 : STD_LOGIC;
    signal arp_table_U0_arpTable_ipAddress_we0 : STD_LOGIC;
    signal arp_table_U0_arpTable_ipAddress_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal arp_table_U0_arpTable_valid_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal arp_table_U0_arpTable_valid_ce0 : STD_LOGIC;
    signal arp_table_U0_arpTable_valid_we0 : STD_LOGIC;
    signal arp_table_U0_arpTable_valid_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal gatewayIP_c_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal gatewayIP_c_channel_empty_n : STD_LOGIC;
    signal networkMask_c_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal networkMask_c_channel_empty_n : STD_LOGIC;
    signal macIpEncode_i_full_n : STD_LOGIC;
    signal macIpEncode_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal macIpEncode_i_empty_n : STD_LOGIC;
    signal macIpEncode_rsp_i_full_n : STD_LOGIC;
    signal macIpEncode_rsp_i_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal macIpEncode_rsp_i_empty_n : STD_LOGIC;
    signal myIpAddress_c_full_n : STD_LOGIC;
    signal myIpAddress_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal myIpAddress_c_empty_n : STD_LOGIC;
    signal arpReplyFifo_full_n : STD_LOGIC;
    signal arpReplyFifo_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal arpReplyFifo_empty_n : STD_LOGIC;
    signal arpTableInsertFifo_full_n : STD_LOGIC;
    signal arpTableInsertFifo_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal arpTableInsertFifo_empty_n : STD_LOGIC;
    signal arpRequestFifo_full_n : STD_LOGIC;
    signal arpRequestFifo_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal arpRequestFifo_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component arp_server_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        gatewayIP : IN STD_LOGIC_VECTOR (31 downto 0);
        networkMask : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component arp_server_genARPDiscovery IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        macIpEncode_req_V_TVALID : IN STD_LOGIC;
        macIpEncode_rsp_i_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        macIpEncode_rsp_i_empty_n : IN STD_LOGIC;
        macIpEncode_rsp_i_read : OUT STD_LOGIC;
        macIpEncode_i_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        macIpEncode_i_full_n : IN STD_LOGIC;
        macIpEncode_i_write : OUT STD_LOGIC;
        macIpEncode_rsp_V_TREADY : IN STD_LOGIC;
        macIpEncode_req_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        macIpEncode_req_V_TREADY : OUT STD_LOGIC;
        macIpEncode_rsp_V_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        macIpEncode_rsp_V_TVALID : OUT STD_LOGIC;
        arp_scan_i : IN STD_LOGIC_VECTOR (0 downto 0);
        arp_scan_o : OUT STD_LOGIC_VECTOR (0 downto 0);
        arp_scan_o_ap_vld : OUT STD_LOGIC;
        myIpAddress : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component arp_server_arp_pkg_receiver IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        myIpAddress_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        myIpAddress_c_full_n : IN STD_LOGIC;
        myIpAddress_c_write : OUT STD_LOGIC;
        arpDataIn_TVALID : IN STD_LOGIC;
        arpTableInsertFifo_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        arpTableInsertFifo_full_n : IN STD_LOGIC;
        arpTableInsertFifo_write : OUT STD_LOGIC;
        arpReplyFifo_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        arpReplyFifo_full_n : IN STD_LOGIC;
        arpReplyFifo_write : OUT STD_LOGIC;
        arpDataIn_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        arpDataIn_TREADY : OUT STD_LOGIC;
        arpDataIn_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
        arpDataIn_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        arpDataIn_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        myIpAddress : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component arp_server_arp_pkg_sender IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        arpRequestFifo_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        arpRequestFifo_empty_n : IN STD_LOGIC;
        arpRequestFifo_read : OUT STD_LOGIC;
        arpReplyFifo_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        arpReplyFifo_empty_n : IN STD_LOGIC;
        arpReplyFifo_read : OUT STD_LOGIC;
        arpDataOut_TREADY : IN STD_LOGIC;
        arpDataOut_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        arpDataOut_TVALID : OUT STD_LOGIC;
        arpDataOut_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
        arpDataOut_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        arpDataOut_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        myMacAddress : IN STD_LOGIC_VECTOR (47 downto 0);
        myIpAddress : IN STD_LOGIC_VECTOR (31 downto 0);
        gatewayIP : IN STD_LOGIC_VECTOR (31 downto 0);
        networkMask : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component arp_server_arp_table IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        myIpAddress_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        myIpAddress_empty_n : IN STD_LOGIC;
        myIpAddress_read : OUT STD_LOGIC;
        macIpEncode_i_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        macIpEncode_i_empty_n : IN STD_LOGIC;
        macIpEncode_i_read : OUT STD_LOGIC;
        arpTableInsertFifo_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        arpTableInsertFifo_empty_n : IN STD_LOGIC;
        arpTableInsertFifo_read : OUT STD_LOGIC;
        macIpEncode_rsp_i_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        macIpEncode_rsp_i_full_n : IN STD_LOGIC;
        macIpEncode_rsp_i_write : OUT STD_LOGIC;
        arpRequestFifo_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        arpRequestFifo_full_n : IN STD_LOGIC;
        arpRequestFifo_write : OUT STD_LOGIC;
        arpTable_macAddress_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        arpTable_macAddress_ce0 : OUT STD_LOGIC;
        arpTable_macAddress_we0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        arpTable_macAddress_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        arpTable_macAddress_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        arpTable_ipAddress_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        arpTable_ipAddress_ce0 : OUT STD_LOGIC;
        arpTable_ipAddress_we0 : OUT STD_LOGIC;
        arpTable_ipAddress_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        arpTable_valid_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        arpTable_valid_ce0 : OUT STD_LOGIC;
        arpTable_valid_we0 : OUT STD_LOGIC;
        arpTable_valid_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        arpTable_valid_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component arp_server_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component arp_server_fifo_w32_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component arp_server_fifo_w128_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component arp_server_fifo_w256_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (255 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (255 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component arp_server_s_axilite_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        arp_scan_o : IN STD_LOGIC_VECTOR (0 downto 0);
        arp_scan_o_ap_vld : IN STD_LOGIC;
        arp_scan_i : OUT STD_LOGIC_VECTOR (0 downto 0);
        arpTable_valid_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        arpTable_valid_ce0 : IN STD_LOGIC;
        arpTable_valid_we0 : IN STD_LOGIC;
        arpTable_valid_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        arpTable_valid_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        arpTable_ipAddress_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        arpTable_ipAddress_ce0 : IN STD_LOGIC;
        arpTable_ipAddress_we0 : IN STD_LOGIC;
        arpTable_ipAddress_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        arpTable_macAddress_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        arpTable_macAddress_ce0 : IN STD_LOGIC;
        arpTable_macAddress_we0 : IN STD_LOGIC_VECTOR (7 downto 0);
        arpTable_macAddress_d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        arpTable_macAddress_q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    s_axilite_s_axi_U : component arp_server_s_axilite_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_S_AXILITE_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_S_AXILITE_DATA_WIDTH)
    port map (
        AWVALID => s_axi_s_axilite_AWVALID,
        AWREADY => s_axi_s_axilite_AWREADY,
        AWADDR => s_axi_s_axilite_AWADDR,
        WVALID => s_axi_s_axilite_WVALID,
        WREADY => s_axi_s_axilite_WREADY,
        WDATA => s_axi_s_axilite_WDATA,
        WSTRB => s_axi_s_axilite_WSTRB,
        ARVALID => s_axi_s_axilite_ARVALID,
        ARREADY => s_axi_s_axilite_ARREADY,
        ARADDR => s_axi_s_axilite_ARADDR,
        RVALID => s_axi_s_axilite_RVALID,
        RREADY => s_axi_s_axilite_RREADY,
        RDATA => s_axi_s_axilite_RDATA,
        RRESP => s_axi_s_axilite_RRESP,
        BVALID => s_axi_s_axilite_BVALID,
        BREADY => s_axi_s_axilite_BREADY,
        BRESP => s_axi_s_axilite_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        arp_scan_o => genARPDiscovery_U0_arp_scan_o,
        arp_scan_o_ap_vld => genARPDiscovery_U0_arp_scan_o_ap_vld,
        arp_scan_i => arp_scan_i,
        arpTable_valid_address0 => arp_table_U0_arpTable_valid_address0,
        arpTable_valid_ce0 => arp_table_U0_arpTable_valid_ce0,
        arpTable_valid_we0 => arp_table_U0_arpTable_valid_we0,
        arpTable_valid_d0 => arp_table_U0_arpTable_valid_d0,
        arpTable_valid_q0 => arpTable_valid_q0,
        arpTable_ipAddress_address0 => arp_table_U0_arpTable_ipAddress_address0,
        arpTable_ipAddress_ce0 => arp_table_U0_arpTable_ipAddress_ce0,
        arpTable_ipAddress_we0 => arp_table_U0_arpTable_ipAddress_we0,
        arpTable_ipAddress_d0 => arp_table_U0_arpTable_ipAddress_d0,
        arpTable_macAddress_address0 => arp_table_U0_arpTable_macAddress_address0,
        arpTable_macAddress_ce0 => arp_table_U0_arpTable_macAddress_ce0,
        arpTable_macAddress_we0 => arp_table_U0_arpTable_macAddress_we0,
        arpTable_macAddress_d0 => arp_table_U0_arpTable_macAddress_d0,
        arpTable_macAddress_q0 => arpTable_macAddress_q0);

    entry_proc_U0 : component arp_server_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => entry_proc_U0_ap_start,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        gatewayIP => gatewayIP,
        networkMask => networkMask,
        ap_return_0 => entry_proc_U0_ap_return_0,
        ap_return_1 => entry_proc_U0_ap_return_1);

    genARPDiscovery_U0 : component arp_server_genARPDiscovery
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => genARPDiscovery_U0_ap_start,
        ap_done => genARPDiscovery_U0_ap_done,
        ap_continue => genARPDiscovery_U0_ap_continue,
        ap_idle => genARPDiscovery_U0_ap_idle,
        ap_ready => genARPDiscovery_U0_ap_ready,
        macIpEncode_req_V_TVALID => macIpEncode_req_V_TVALID,
        macIpEncode_rsp_i_dout => macIpEncode_rsp_i_dout,
        macIpEncode_rsp_i_empty_n => macIpEncode_rsp_i_empty_n,
        macIpEncode_rsp_i_read => genARPDiscovery_U0_macIpEncode_rsp_i_read,
        macIpEncode_i_din => genARPDiscovery_U0_macIpEncode_i_din,
        macIpEncode_i_full_n => macIpEncode_i_full_n,
        macIpEncode_i_write => genARPDiscovery_U0_macIpEncode_i_write,
        macIpEncode_rsp_V_TREADY => macIpEncode_rsp_V_TREADY,
        macIpEncode_req_V_TDATA => macIpEncode_req_V_TDATA,
        macIpEncode_req_V_TREADY => genARPDiscovery_U0_macIpEncode_req_V_TREADY,
        macIpEncode_rsp_V_TDATA => genARPDiscovery_U0_macIpEncode_rsp_V_TDATA,
        macIpEncode_rsp_V_TVALID => genARPDiscovery_U0_macIpEncode_rsp_V_TVALID,
        arp_scan_i => arp_scan_i,
        arp_scan_o => genARPDiscovery_U0_arp_scan_o,
        arp_scan_o_ap_vld => genARPDiscovery_U0_arp_scan_o_ap_vld,
        myIpAddress => myIpAddress);

    arp_pkg_receiver_U0 : component arp_server_arp_pkg_receiver
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => arp_pkg_receiver_U0_ap_start,
        ap_done => arp_pkg_receiver_U0_ap_done,
        ap_continue => arp_pkg_receiver_U0_ap_continue,
        ap_idle => arp_pkg_receiver_U0_ap_idle,
        ap_ready => arp_pkg_receiver_U0_ap_ready,
        myIpAddress_c_din => arp_pkg_receiver_U0_myIpAddress_c_din,
        myIpAddress_c_full_n => myIpAddress_c_full_n,
        myIpAddress_c_write => arp_pkg_receiver_U0_myIpAddress_c_write,
        arpDataIn_TVALID => arpDataIn_TVALID,
        arpTableInsertFifo_din => arp_pkg_receiver_U0_arpTableInsertFifo_din,
        arpTableInsertFifo_full_n => arpTableInsertFifo_full_n,
        arpTableInsertFifo_write => arp_pkg_receiver_U0_arpTableInsertFifo_write,
        arpReplyFifo_din => arp_pkg_receiver_U0_arpReplyFifo_din,
        arpReplyFifo_full_n => arpReplyFifo_full_n,
        arpReplyFifo_write => arp_pkg_receiver_U0_arpReplyFifo_write,
        arpDataIn_TDATA => arpDataIn_TDATA,
        arpDataIn_TREADY => arp_pkg_receiver_U0_arpDataIn_TREADY,
        arpDataIn_TKEEP => arpDataIn_TKEEP,
        arpDataIn_TSTRB => arpDataIn_TSTRB,
        arpDataIn_TLAST => arpDataIn_TLAST,
        myIpAddress => myIpAddress);

    arp_pkg_sender_U0 : component arp_server_arp_pkg_sender
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => arp_pkg_sender_U0_ap_start,
        ap_done => arp_pkg_sender_U0_ap_done,
        ap_continue => arp_pkg_sender_U0_ap_continue,
        ap_idle => arp_pkg_sender_U0_ap_idle,
        ap_ready => arp_pkg_sender_U0_ap_ready,
        arpRequestFifo_dout => arpRequestFifo_dout,
        arpRequestFifo_empty_n => arpRequestFifo_empty_n,
        arpRequestFifo_read => arp_pkg_sender_U0_arpRequestFifo_read,
        arpReplyFifo_dout => arpReplyFifo_dout,
        arpReplyFifo_empty_n => arpReplyFifo_empty_n,
        arpReplyFifo_read => arp_pkg_sender_U0_arpReplyFifo_read,
        arpDataOut_TREADY => arpDataOut_TREADY,
        arpDataOut_TDATA => arp_pkg_sender_U0_arpDataOut_TDATA,
        arpDataOut_TVALID => arp_pkg_sender_U0_arpDataOut_TVALID,
        arpDataOut_TKEEP => arp_pkg_sender_U0_arpDataOut_TKEEP,
        arpDataOut_TSTRB => arp_pkg_sender_U0_arpDataOut_TSTRB,
        arpDataOut_TLAST => arp_pkg_sender_U0_arpDataOut_TLAST,
        myMacAddress => myMacAddress,
        myIpAddress => myIpAddress,
        gatewayIP => gatewayIP,
        networkMask => networkMask);

    arp_table_U0 : component arp_server_arp_table
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => arp_table_U0_ap_start,
        ap_done => arp_table_U0_ap_done,
        ap_continue => arp_table_U0_ap_continue,
        ap_idle => arp_table_U0_ap_idle,
        ap_ready => arp_table_U0_ap_ready,
        myIpAddress_dout => myIpAddress_c_dout,
        myIpAddress_empty_n => myIpAddress_c_empty_n,
        myIpAddress_read => arp_table_U0_myIpAddress_read,
        macIpEncode_i_dout => macIpEncode_i_dout,
        macIpEncode_i_empty_n => macIpEncode_i_empty_n,
        macIpEncode_i_read => arp_table_U0_macIpEncode_i_read,
        arpTableInsertFifo_dout => arpTableInsertFifo_dout,
        arpTableInsertFifo_empty_n => arpTableInsertFifo_empty_n,
        arpTableInsertFifo_read => arp_table_U0_arpTableInsertFifo_read,
        macIpEncode_rsp_i_din => arp_table_U0_macIpEncode_rsp_i_din,
        macIpEncode_rsp_i_full_n => macIpEncode_rsp_i_full_n,
        macIpEncode_rsp_i_write => arp_table_U0_macIpEncode_rsp_i_write,
        arpRequestFifo_din => arp_table_U0_arpRequestFifo_din,
        arpRequestFifo_full_n => arpRequestFifo_full_n,
        arpRequestFifo_write => arp_table_U0_arpRequestFifo_write,
        arpTable_macAddress_address0 => arp_table_U0_arpTable_macAddress_address0,
        arpTable_macAddress_ce0 => arp_table_U0_arpTable_macAddress_ce0,
        arpTable_macAddress_we0 => arp_table_U0_arpTable_macAddress_we0,
        arpTable_macAddress_d0 => arp_table_U0_arpTable_macAddress_d0,
        arpTable_macAddress_q0 => arpTable_macAddress_q0,
        arpTable_ipAddress_address0 => arp_table_U0_arpTable_ipAddress_address0,
        arpTable_ipAddress_ce0 => arp_table_U0_arpTable_ipAddress_ce0,
        arpTable_ipAddress_we0 => arp_table_U0_arpTable_ipAddress_we0,
        arpTable_ipAddress_d0 => arp_table_U0_arpTable_ipAddress_d0,
        arpTable_valid_address0 => arp_table_U0_arpTable_valid_address0,
        arpTable_valid_ce0 => arp_table_U0_arpTable_valid_ce0,
        arpTable_valid_we0 => arp_table_U0_arpTable_valid_we0,
        arpTable_valid_d0 => arp_table_U0_arpTable_valid_d0,
        arpTable_valid_q0 => arpTable_valid_q0,
        p_read => gatewayIP_c_channel_dout,
        p_read1 => networkMask_c_channel_dout);

    gatewayIP_c_channel_U : component arp_server_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_ap_return_0,
        if_full_n => gatewayIP_c_channel_full_n,
        if_write => ap_channel_done_gatewayIP_c_channel,
        if_dout => gatewayIP_c_channel_dout,
        if_empty_n => gatewayIP_c_channel_empty_n,
        if_read => arp_table_U0_ap_ready);

    networkMask_c_channel_U : component arp_server_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_ap_return_1,
        if_full_n => networkMask_c_channel_full_n,
        if_write => ap_channel_done_networkMask_c_channel,
        if_dout => networkMask_c_channel_dout,
        if_empty_n => networkMask_c_channel_empty_n,
        if_read => arp_table_U0_ap_ready);

    macIpEncode_i_U : component arp_server_fifo_w32_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => genARPDiscovery_U0_macIpEncode_i_din,
        if_full_n => macIpEncode_i_full_n,
        if_write => genARPDiscovery_U0_macIpEncode_i_write,
        if_dout => macIpEncode_i_dout,
        if_empty_n => macIpEncode_i_empty_n,
        if_read => arp_table_U0_macIpEncode_i_read);

    macIpEncode_rsp_i_U : component arp_server_fifo_w128_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => arp_table_U0_macIpEncode_rsp_i_din,
        if_full_n => macIpEncode_rsp_i_full_n,
        if_write => arp_table_U0_macIpEncode_rsp_i_write,
        if_dout => macIpEncode_rsp_i_dout,
        if_empty_n => macIpEncode_rsp_i_empty_n,
        if_read => genARPDiscovery_U0_macIpEncode_rsp_i_read);

    myIpAddress_c_U : component arp_server_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => arp_pkg_receiver_U0_myIpAddress_c_din,
        if_full_n => myIpAddress_c_full_n,
        if_write => arp_pkg_receiver_U0_myIpAddress_c_write,
        if_dout => myIpAddress_c_dout,
        if_empty_n => myIpAddress_c_empty_n,
        if_read => arp_table_U0_myIpAddress_read);

    arpReplyFifo_U : component arp_server_fifo_w256_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => arp_pkg_receiver_U0_arpReplyFifo_din,
        if_full_n => arpReplyFifo_full_n,
        if_write => arp_pkg_receiver_U0_arpReplyFifo_write,
        if_dout => arpReplyFifo_dout,
        if_empty_n => arpReplyFifo_empty_n,
        if_read => arp_pkg_sender_U0_arpReplyFifo_read);

    arpTableInsertFifo_U : component arp_server_fifo_w128_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => arp_pkg_receiver_U0_arpTableInsertFifo_din,
        if_full_n => arpTableInsertFifo_full_n,
        if_write => arp_pkg_receiver_U0_arpTableInsertFifo_write,
        if_dout => arpTableInsertFifo_dout,
        if_empty_n => arpTableInsertFifo_empty_n,
        if_read => arp_table_U0_arpTableInsertFifo_read);

    arpRequestFifo_U : component arp_server_fifo_w32_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => arp_table_U0_arpRequestFifo_din,
        if_full_n => arpRequestFifo_full_n,
        if_write => arp_table_U0_arpRequestFifo_write,
        if_dout => arpRequestFifo_dout,
        if_empty_n => arpRequestFifo_empty_n,
        if_read => arp_pkg_sender_U0_arpRequestFifo_read);





    ap_sync_reg_channel_write_gatewayIP_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_gatewayIP_c_channel <= ap_const_logic_0;
            else
                if (((entry_proc_U0_ap_done and entry_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_gatewayIP_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_gatewayIP_c_channel <= ap_sync_channel_write_gatewayIP_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_networkMask_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_networkMask_c_channel <= ap_const_logic_0;
            else
                if (((entry_proc_U0_ap_done and entry_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_networkMask_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_networkMask_c_channel <= ap_sync_channel_write_networkMask_c_channel;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_gatewayIP_c_channel <= ((ap_sync_reg_channel_write_gatewayIP_c_channel xor ap_const_logic_1) and entry_proc_U0_ap_done);
    ap_channel_done_networkMask_c_channel <= ((ap_sync_reg_channel_write_networkMask_c_channel xor ap_const_logic_1) and entry_proc_U0_ap_done);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_channel_write_gatewayIP_c_channel <= ((gatewayIP_c_channel_full_n and ap_channel_done_gatewayIP_c_channel) or ap_sync_reg_channel_write_gatewayIP_c_channel);
    ap_sync_channel_write_networkMask_c_channel <= ((networkMask_c_channel_full_n and ap_channel_done_networkMask_c_channel) or ap_sync_reg_channel_write_networkMask_c_channel);
    arpDataIn_TREADY <= arp_pkg_receiver_U0_arpDataIn_TREADY;
    arpDataOut_TDATA <= arp_pkg_sender_U0_arpDataOut_TDATA;
    arpDataOut_TKEEP <= arp_pkg_sender_U0_arpDataOut_TKEEP;
    arpDataOut_TLAST <= arp_pkg_sender_U0_arpDataOut_TLAST;
    arpDataOut_TSTRB <= arp_pkg_sender_U0_arpDataOut_TSTRB;
    arpDataOut_TVALID <= arp_pkg_sender_U0_arpDataOut_TVALID;
    arp_pkg_receiver_U0_ap_continue <= ap_const_logic_1;
    arp_pkg_receiver_U0_ap_start <= ap_const_logic_1;
    arp_pkg_sender_U0_ap_continue <= ap_const_logic_1;
    arp_pkg_sender_U0_ap_start <= ap_const_logic_1;
    arp_table_U0_ap_continue <= ap_const_logic_1;
    arp_table_U0_ap_start <= (networkMask_c_channel_empty_n and gatewayIP_c_channel_empty_n);
    entry_proc_U0_ap_continue <= (ap_sync_channel_write_networkMask_c_channel and ap_sync_channel_write_gatewayIP_c_channel);
    entry_proc_U0_ap_start <= ap_const_logic_1;
    genARPDiscovery_U0_ap_continue <= ap_const_logic_1;
    genARPDiscovery_U0_ap_start <= ap_const_logic_1;
    macIpEncode_req_V_TREADY <= genARPDiscovery_U0_macIpEncode_req_V_TREADY;
    macIpEncode_rsp_V_TDATA <= genARPDiscovery_U0_macIpEncode_rsp_V_TDATA;
    macIpEncode_rsp_V_TVALID <= genARPDiscovery_U0_macIpEncode_rsp_V_TVALID;
end behav;
