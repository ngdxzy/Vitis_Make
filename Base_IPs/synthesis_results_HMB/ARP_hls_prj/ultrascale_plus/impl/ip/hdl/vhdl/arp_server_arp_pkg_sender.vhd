-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity arp_server_arp_pkg_sender is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    arpRequestFifo_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    arpRequestFifo_empty_n : IN STD_LOGIC;
    arpRequestFifo_read : OUT STD_LOGIC;
    arpReplyFifo_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    arpReplyFifo_empty_n : IN STD_LOGIC;
    arpReplyFifo_read : OUT STD_LOGIC;
    arpDataOut_TREADY : IN STD_LOGIC;
    arpDataOut_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    arpDataOut_TVALID : OUT STD_LOGIC;
    arpDataOut_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    arpDataOut_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    arpDataOut_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    myMacAddress : IN STD_LOGIC_VECTOR (47 downto 0);
    myIpAddress : IN STD_LOGIC_VECTOR (31 downto 0);
    gatewayIP : IN STD_LOGIC_VECTOR (31 downto 0);
    networkMask : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of arp_server_arp_pkg_sender is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0000111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv176_lc_1 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010001010100010101000110010001100100111101000011000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_200 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_const_lv80_1000406000801000608 : STD_LOGIC_VECTOR (79 downto 0) := "00000001000000000000010000000110000000000000100000000001000000000000011000001000";
    constant ap_const_lv48_FFFFFFFFFFFF : STD_LOGIC_VECTOR (47 downto 0) := "111111111111111111111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal aps_fsmState_load_load_fu_203_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_i_nbreadreq_fu_156_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_35_nbreadreq_fu_164_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op26_read_state1 : BOOLEAN;
    signal ap_predicate_op31_read_state1 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal aps_fsmState_load_reg_464 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal aps_fsmState_load_reg_464_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal regslice_both_arpDataOut_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal aps_fsmState : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal replyMeta_srcMac_V : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal replyMeta_ethType_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal replyMeta_hwType_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal replyMeta_protoType_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal replyMeta_hwLen_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal replyMeta_protoLen_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal replyMeta_hwAddrSrc_V : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal replyMeta_protoAddrSrc_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal inputIP_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal arpDataOut_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal arpReplyFifo_blk_n : STD_LOGIC;
    signal arpRequestFifo_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal lhs_V_2_reg_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal myMacAddress_read_reg_475 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_reg_483 : STD_LOGIC_VECTOR (31 downto 0);
    signal auxQueryIP_V_1_reg_488 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_391_p14 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_s_fu_446_p9 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln145_fu_231_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal xor_ln1049_fu_423_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln1049_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1049_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal auxQueryIP_V_2_fu_439_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal arpDataOut_TDATA_int_regslice : STD_LOGIC_VECTOR (511 downto 0);
    signal arpDataOut_TVALID_int_regslice : STD_LOGIC;
    signal arpDataOut_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_arpDataOut_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_arpDataOut_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_arpDataOut_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_arpDataOut_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_arpDataOut_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_arpDataOut_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_arpDataOut_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_arpDataOut_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_arpDataOut_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_arpDataOut_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_condition_223 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component arp_server_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_arpDataOut_V_data_V_U : component arp_server_regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => arpDataOut_TDATA_int_regslice,
        vld_in => arpDataOut_TVALID_int_regslice,
        ack_in => arpDataOut_TREADY_int_regslice,
        data_out => arpDataOut_TDATA,
        vld_out => regslice_both_arpDataOut_V_data_V_U_vld_out,
        ack_out => arpDataOut_TREADY,
        apdone_blk => regslice_both_arpDataOut_V_data_V_U_apdone_blk);

    regslice_both_arpDataOut_V_keep_V_U : component arp_server_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv64_FFFFFFFFFFFFFFF,
        vld_in => arpDataOut_TVALID_int_regslice,
        ack_in => regslice_both_arpDataOut_V_keep_V_U_ack_in_dummy,
        data_out => arpDataOut_TKEEP,
        vld_out => regslice_both_arpDataOut_V_keep_V_U_vld_out,
        ack_out => arpDataOut_TREADY,
        apdone_blk => regslice_both_arpDataOut_V_keep_V_U_apdone_blk);

    regslice_both_arpDataOut_V_strb_V_U : component arp_server_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv64_0,
        vld_in => arpDataOut_TVALID_int_regslice,
        ack_in => regslice_both_arpDataOut_V_strb_V_U_ack_in_dummy,
        data_out => arpDataOut_TSTRB,
        vld_out => regslice_both_arpDataOut_V_strb_V_U_vld_out,
        ack_out => arpDataOut_TREADY,
        apdone_blk => regslice_both_arpDataOut_V_strb_V_U_apdone_blk);

    regslice_both_arpDataOut_V_last_V_U : component arp_server_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv1_1,
        vld_in => arpDataOut_TVALID_int_regslice,
        ack_in => regslice_both_arpDataOut_V_last_V_U_ack_in_dummy,
        data_out => arpDataOut_TLAST,
        vld_out => regslice_both_arpDataOut_V_last_V_U_vld_out,
        ack_out => arpDataOut_TREADY,
        apdone_blk => regslice_both_arpDataOut_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    aps_fsmState_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_nbreadreq_fu_156_p3 = ap_const_lv1_1) and (aps_fsmState = ap_const_lv2_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                aps_fsmState <= ap_const_lv2_1;
            elsif (((tmp_i_35_nbreadreq_fu_164_p3 = ap_const_lv1_1) and (tmp_i_nbreadreq_fu_156_p3 = ap_const_lv1_0) and (aps_fsmState = ap_const_lv2_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                aps_fsmState <= ap_const_lv2_2;
            elsif ((((aps_fsmState_load_load_fu_203_p1 = ap_const_lv2_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((aps_fsmState_load_load_fu_203_p1 = ap_const_lv2_2) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                aps_fsmState <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                aps_fsmState_load_reg_464 <= aps_fsmState;
                aps_fsmState_load_reg_464_pp0_iter1_reg <= aps_fsmState_load_reg_464;
                lhs_V_2_reg_468 <= myIpAddress;
                myMacAddress_read_reg_475 <= myMacAddress;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((aps_fsmState_load_load_fu_203_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                auxQueryIP_V_1_reg_488 <= gatewayIP;
                rhs_V_reg_483 <= networkMask;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_35_nbreadreq_fu_164_p3 = ap_const_lv1_1) and (tmp_i_nbreadreq_fu_156_p3 = ap_const_lv1_0) and (aps_fsmState = ap_const_lv2_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                inputIP_V <= arpRequestFifo_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_nbreadreq_fu_156_p3 = ap_const_lv1_1) and (aps_fsmState = ap_const_lv2_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                replyMeta_ethType_V <= arpReplyFifo_dout(79 downto 64);
                replyMeta_hwAddrSrc_V <= arpReplyFifo_dout(175 downto 128);
                replyMeta_hwLen_V <= arpReplyFifo_dout(119 downto 112);
                replyMeta_hwType_V <= arpReplyFifo_dout(95 downto 80);
                replyMeta_protoAddrSrc_V <= arpReplyFifo_dout(223 downto 192);
                replyMeta_protoLen_V <= arpReplyFifo_dout(127 downto 120);
                replyMeta_protoType_V <= arpReplyFifo_dout(111 downto 96);
                replyMeta_srcMac_V <= trunc_ln145_fu_231_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln1049_fu_428_p2 <= (xor_ln1049_fu_423_p2 and rhs_V_reg_483);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, arpRequestFifo_empty_n, ap_predicate_op26_read_state1, arpReplyFifo_empty_n, ap_predicate_op31_read_state1, ap_done_reg, aps_fsmState_load_reg_464, aps_fsmState_load_reg_464_pp0_iter1_reg, regslice_both_arpDataOut_V_data_V_U_apdone_blk, arpDataOut_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((regslice_both_arpDataOut_V_data_V_U_apdone_blk = ap_const_logic_1) or ((aps_fsmState_load_reg_464_pp0_iter1_reg = ap_const_lv2_2) and (arpDataOut_TREADY_int_regslice = ap_const_logic_0)) or ((aps_fsmState_load_reg_464_pp0_iter1_reg = ap_const_lv2_1) and (arpDataOut_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((aps_fsmState_load_reg_464 = ap_const_lv2_2) and (arpDataOut_TREADY_int_regslice = ap_const_logic_0)) or ((aps_fsmState_load_reg_464 = ap_const_lv2_1) and (arpDataOut_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op31_read_state1 = ap_const_boolean_1) and (arpReplyFifo_empty_n = ap_const_logic_0)) or ((ap_predicate_op26_read_state1 = ap_const_boolean_1) and (arpRequestFifo_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, arpRequestFifo_empty_n, ap_predicate_op26_read_state1, arpReplyFifo_empty_n, ap_predicate_op31_read_state1, ap_done_reg, aps_fsmState_load_reg_464, ap_block_state2_io, aps_fsmState_load_reg_464_pp0_iter1_reg, regslice_both_arpDataOut_V_data_V_U_apdone_blk, ap_block_state3_io, arpDataOut_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((regslice_both_arpDataOut_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state3_io) or ((aps_fsmState_load_reg_464_pp0_iter1_reg = ap_const_lv2_2) and (arpDataOut_TREADY_int_regslice = ap_const_logic_0)) or ((aps_fsmState_load_reg_464_pp0_iter1_reg = ap_const_lv2_1) and (arpDataOut_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((aps_fsmState_load_reg_464 = ap_const_lv2_2) and (arpDataOut_TREADY_int_regslice = ap_const_logic_0)) or ((aps_fsmState_load_reg_464 = ap_const_lv2_1) and (arpDataOut_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op31_read_state1 = ap_const_boolean_1) and (arpReplyFifo_empty_n = ap_const_logic_0)) or ((ap_predicate_op26_read_state1 = ap_const_boolean_1) and (arpRequestFifo_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, arpRequestFifo_empty_n, ap_predicate_op26_read_state1, arpReplyFifo_empty_n, ap_predicate_op31_read_state1, ap_done_reg, aps_fsmState_load_reg_464, ap_block_state2_io, aps_fsmState_load_reg_464_pp0_iter1_reg, regslice_both_arpDataOut_V_data_V_U_apdone_blk, ap_block_state3_io, arpDataOut_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((regslice_both_arpDataOut_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state3_io) or ((aps_fsmState_load_reg_464_pp0_iter1_reg = ap_const_lv2_2) and (arpDataOut_TREADY_int_regslice = ap_const_logic_0)) or ((aps_fsmState_load_reg_464_pp0_iter1_reg = ap_const_lv2_1) and (arpDataOut_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((aps_fsmState_load_reg_464 = ap_const_lv2_2) and (arpDataOut_TREADY_int_regslice = ap_const_logic_0)) or ((aps_fsmState_load_reg_464 = ap_const_lv2_1) and (arpDataOut_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op31_read_state1 = ap_const_boolean_1) and (arpReplyFifo_empty_n = ap_const_logic_0)) or ((ap_predicate_op26_read_state1 = ap_const_boolean_1) and (arpRequestFifo_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(arpRequestFifo_empty_n, ap_predicate_op26_read_state1, arpReplyFifo_empty_n, ap_predicate_op31_read_state1, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op31_read_state1 = ap_const_boolean_1) and (arpReplyFifo_empty_n = ap_const_logic_0)) or ((ap_predicate_op26_read_state1 = ap_const_boolean_1) and (arpRequestFifo_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state2_io_assign_proc : process(aps_fsmState_load_reg_464, arpDataOut_TREADY_int_regslice)
    begin
                ap_block_state2_io <= (((aps_fsmState_load_reg_464 = ap_const_lv2_2) and (arpDataOut_TREADY_int_regslice = ap_const_logic_0)) or ((aps_fsmState_load_reg_464 = ap_const_lv2_1) and (arpDataOut_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(aps_fsmState_load_reg_464, arpDataOut_TREADY_int_regslice)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((aps_fsmState_load_reg_464 = ap_const_lv2_2) and (arpDataOut_TREADY_int_regslice = ap_const_logic_0)) or ((aps_fsmState_load_reg_464 = ap_const_lv2_1) and (arpDataOut_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state3_io_assign_proc : process(aps_fsmState_load_reg_464_pp0_iter1_reg, arpDataOut_TREADY_int_regslice)
    begin
                ap_block_state3_io <= (((aps_fsmState_load_reg_464_pp0_iter1_reg = ap_const_lv2_2) and (arpDataOut_TREADY_int_regslice = ap_const_logic_0)) or ((aps_fsmState_load_reg_464_pp0_iter1_reg = ap_const_lv2_1) and (arpDataOut_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(aps_fsmState_load_reg_464_pp0_iter1_reg, regslice_both_arpDataOut_V_data_V_U_apdone_blk, arpDataOut_TREADY_int_regslice)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((regslice_both_arpDataOut_V_data_V_U_apdone_blk = ap_const_logic_1) or ((aps_fsmState_load_reg_464_pp0_iter1_reg = ap_const_lv2_2) and (arpDataOut_TREADY_int_regslice = ap_const_logic_0)) or ((aps_fsmState_load_reg_464_pp0_iter1_reg = ap_const_lv2_1) and (arpDataOut_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_condition_223_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_01001)
    begin
                ap_condition_223 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op26_read_state1_assign_proc : process(tmp_i_nbreadreq_fu_156_p3, tmp_i_35_nbreadreq_fu_164_p3, aps_fsmState)
    begin
                ap_predicate_op26_read_state1 <= ((tmp_i_35_nbreadreq_fu_164_p3 = ap_const_lv1_1) and (tmp_i_nbreadreq_fu_156_p3 = ap_const_lv1_0) and (aps_fsmState = ap_const_lv2_0));
    end process;


    ap_predicate_op31_read_state1_assign_proc : process(tmp_i_nbreadreq_fu_156_p3, aps_fsmState)
    begin
                ap_predicate_op31_read_state1 <= ((tmp_i_nbreadreq_fu_156_p3 = ap_const_lv1_1) and (aps_fsmState = ap_const_lv2_0));
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    aps_fsmState_load_load_fu_203_p1 <= aps_fsmState;

    arpDataOut_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, aps_fsmState_load_reg_464, aps_fsmState_load_reg_464_pp0_iter1_reg, ap_block_pp0_stage0, arpDataOut_TREADY_int_regslice)
    begin
        if ((((aps_fsmState_load_reg_464_pp0_iter1_reg = ap_const_lv2_2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((aps_fsmState_load_reg_464_pp0_iter1_reg = ap_const_lv2_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((aps_fsmState_load_reg_464 = ap_const_lv2_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((aps_fsmState_load_reg_464 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            arpDataOut_TDATA_blk_n <= arpDataOut_TREADY_int_regslice;
        else 
            arpDataOut_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    arpDataOut_TDATA_int_regslice_assign_proc : process(aps_fsmState_load_reg_464, p_Result_1_fu_391_p14, p_Result_s_fu_446_p9, ap_condition_223)
    begin
        if ((ap_const_boolean_1 = ap_condition_223)) then
            if ((aps_fsmState_load_reg_464 = ap_const_lv2_2)) then 
                arpDataOut_TDATA_int_regslice <= p_Result_s_fu_446_p9;
            elsif ((aps_fsmState_load_reg_464 = ap_const_lv2_1)) then 
                arpDataOut_TDATA_int_regslice <= p_Result_1_fu_391_p14;
            else 
                arpDataOut_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            arpDataOut_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    arpDataOut_TVALID <= regslice_both_arpDataOut_V_data_V_U_vld_out;

    arpDataOut_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, aps_fsmState_load_reg_464, ap_block_pp0_stage0_11001)
    begin
        if ((((aps_fsmState_load_reg_464 = ap_const_lv2_2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((aps_fsmState_load_reg_464 = ap_const_lv2_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            arpDataOut_TVALID_int_regslice <= ap_const_logic_1;
        else 
            arpDataOut_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    arpReplyFifo_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, arpReplyFifo_empty_n, ap_predicate_op31_read_state1, ap_done_reg, ap_block_pp0_stage0)
    begin
        if (((ap_done_reg = ap_const_logic_0) and (ap_predicate_op31_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            arpReplyFifo_blk_n <= arpReplyFifo_empty_n;
        else 
            arpReplyFifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    arpReplyFifo_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op31_read_state1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op31_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            arpReplyFifo_read <= ap_const_logic_1;
        else 
            arpReplyFifo_read <= ap_const_logic_0;
        end if; 
    end process;


    arpRequestFifo_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, arpRequestFifo_empty_n, ap_predicate_op26_read_state1, ap_done_reg, ap_block_pp0_stage0)
    begin
        if (((ap_done_reg = ap_const_logic_0) and (ap_predicate_op26_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            arpRequestFifo_blk_n <= arpRequestFifo_empty_n;
        else 
            arpRequestFifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    arpRequestFifo_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op26_read_state1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op26_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            arpRequestFifo_read <= ap_const_logic_1;
        else 
            arpRequestFifo_read <= ap_const_logic_0;
        end if; 
    end process;

    auxQueryIP_V_2_fu_439_p3 <= 
        inputIP_V when (icmp_ln1049_fu_433_p2(0) = '1') else 
        auxQueryIP_V_1_reg_488;
    icmp_ln1049_fu_433_p2 <= "1" when (and_ln1049_fu_428_p2 = ap_const_lv32_0) else "0";
    p_Result_1_fu_391_p14 <= ((((((((((((ap_const_lv176_lc_1 & replyMeta_protoAddrSrc_V) & replyMeta_hwAddrSrc_V) & lhs_V_2_reg_468) & myMacAddress_read_reg_475) & ap_const_lv16_200) & replyMeta_protoLen_V) & replyMeta_hwLen_V) & replyMeta_protoType_V) & replyMeta_hwType_V) & replyMeta_ethType_V) & myMacAddress_read_reg_475) & replyMeta_srcMac_V);
    p_Result_s_fu_446_p9 <= (((((((ap_const_lv176_lc_1 & auxQueryIP_V_2_fu_439_p3) & ap_const_lv48_0) & lhs_V_2_reg_468) & myMacAddress_read_reg_475) & ap_const_lv80_1000406000801000608) & myMacAddress_read_reg_475) & ap_const_lv48_FFFFFFFFFFFF);
    tmp_i_35_nbreadreq_fu_164_p3 <= (0=>(arpRequestFifo_empty_n), others=>'-');
    tmp_i_nbreadreq_fu_156_p3 <= (0=>(arpReplyFifo_empty_n), others=>'-');
    trunc_ln145_fu_231_p1 <= arpReplyFifo_dout(48 - 1 downto 0);
    xor_ln1049_fu_423_p2 <= (lhs_V_2_reg_468 xor inputIP_V);
end behav;
