// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module arp_server_arp_pkg_sender (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        arpRequestFifo_dout,
        arpRequestFifo_empty_n,
        arpRequestFifo_read,
        arpReplyFifo_dout,
        arpReplyFifo_empty_n,
        arpReplyFifo_read,
        arpDataOut_TREADY,
        arpDataOut_TDATA,
        arpDataOut_TVALID,
        arpDataOut_TKEEP,
        arpDataOut_TSTRB,
        arpDataOut_TLAST,
        myMacAddress,
        myIpAddress,
        gatewayIP,
        networkMask
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] arpRequestFifo_dout;
input   arpRequestFifo_empty_n;
output   arpRequestFifo_read;
input  [255:0] arpReplyFifo_dout;
input   arpReplyFifo_empty_n;
output   arpReplyFifo_read;
input   arpDataOut_TREADY;
output  [511:0] arpDataOut_TDATA;
output   arpDataOut_TVALID;
output  [63:0] arpDataOut_TKEEP;
output  [63:0] arpDataOut_TSTRB;
output  [0:0] arpDataOut_TLAST;
input  [47:0] myMacAddress;
input  [31:0] myIpAddress;
input  [31:0] gatewayIP;
input  [31:0] networkMask;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg arpRequestFifo_read;
reg arpReplyFifo_read;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire   [1:0] aps_fsmState_load_load_fu_203_p1;
wire   [0:0] tmp_i_nbreadreq_fu_156_p3;
wire   [0:0] tmp_i_35_nbreadreq_fu_164_p3;
reg    ap_predicate_op26_read_state1;
reg    ap_predicate_op31_read_state1;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [1:0] aps_fsmState_load_reg_464;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg   [1:0] aps_fsmState_load_reg_464_pp0_iter1_reg;
wire    regslice_both_arpDataOut_V_data_V_U_apdone_blk;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage0_subdone;
reg   [1:0] aps_fsmState;
reg   [47:0] replyMeta_srcMac_V;
reg   [15:0] replyMeta_ethType_V;
reg   [15:0] replyMeta_hwType_V;
reg   [15:0] replyMeta_protoType_V;
reg   [7:0] replyMeta_hwLen_V;
reg   [7:0] replyMeta_protoLen_V;
reg   [47:0] replyMeta_hwAddrSrc_V;
reg   [31:0] replyMeta_protoAddrSrc_V;
reg   [31:0] inputIP_V;
reg    arpDataOut_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    arpReplyFifo_blk_n;
reg    arpRequestFifo_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] lhs_V_2_reg_468;
reg   [47:0] myMacAddress_read_reg_475;
reg   [31:0] rhs_V_reg_483;
reg   [31:0] auxQueryIP_V_1_reg_488;
wire   [511:0] p_Result_1_fu_391_p14;
wire   [511:0] p_Result_s_fu_446_p9;
wire   [47:0] trunc_ln145_fu_231_p1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] xor_ln1049_fu_423_p2;
wire   [31:0] and_ln1049_fu_428_p2;
wire   [0:0] icmp_ln1049_fu_433_p2;
wire   [31:0] auxQueryIP_V_2_fu_439_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
reg   [511:0] arpDataOut_TDATA_int_regslice;
reg    arpDataOut_TVALID_int_regslice;
wire    arpDataOut_TREADY_int_regslice;
wire    regslice_both_arpDataOut_V_data_V_U_vld_out;
wire    regslice_both_arpDataOut_V_keep_V_U_apdone_blk;
wire    regslice_both_arpDataOut_V_keep_V_U_ack_in_dummy;
wire    regslice_both_arpDataOut_V_keep_V_U_vld_out;
wire    regslice_both_arpDataOut_V_strb_V_U_apdone_blk;
wire    regslice_both_arpDataOut_V_strb_V_U_ack_in_dummy;
wire    regslice_both_arpDataOut_V_strb_V_U_vld_out;
wire    regslice_both_arpDataOut_V_last_V_U_apdone_blk;
wire    regslice_both_arpDataOut_V_last_V_U_ack_in_dummy;
wire    regslice_both_arpDataOut_V_last_V_U_vld_out;
reg    ap_condition_223;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
#0 aps_fsmState = 2'd0;
#0 replyMeta_srcMac_V = 48'd0;
#0 replyMeta_ethType_V = 16'd0;
#0 replyMeta_hwType_V = 16'd0;
#0 replyMeta_protoType_V = 16'd0;
#0 replyMeta_hwLen_V = 8'd0;
#0 replyMeta_protoLen_V = 8'd0;
#0 replyMeta_hwAddrSrc_V = 48'd0;
#0 replyMeta_protoAddrSrc_V = 32'd0;
#0 inputIP_V = 32'd0;
end

arp_server_regslice_both #(
    .DataWidth( 512 ))
regslice_both_arpDataOut_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(arpDataOut_TDATA_int_regslice),
    .vld_in(arpDataOut_TVALID_int_regslice),
    .ack_in(arpDataOut_TREADY_int_regslice),
    .data_out(arpDataOut_TDATA),
    .vld_out(regslice_both_arpDataOut_V_data_V_U_vld_out),
    .ack_out(arpDataOut_TREADY),
    .apdone_blk(regslice_both_arpDataOut_V_data_V_U_apdone_blk)
);

arp_server_regslice_both #(
    .DataWidth( 64 ))
regslice_both_arpDataOut_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(64'd1152921504606846975),
    .vld_in(arpDataOut_TVALID_int_regslice),
    .ack_in(regslice_both_arpDataOut_V_keep_V_U_ack_in_dummy),
    .data_out(arpDataOut_TKEEP),
    .vld_out(regslice_both_arpDataOut_V_keep_V_U_vld_out),
    .ack_out(arpDataOut_TREADY),
    .apdone_blk(regslice_both_arpDataOut_V_keep_V_U_apdone_blk)
);

arp_server_regslice_both #(
    .DataWidth( 64 ))
regslice_both_arpDataOut_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(64'd0),
    .vld_in(arpDataOut_TVALID_int_regslice),
    .ack_in(regslice_both_arpDataOut_V_strb_V_U_ack_in_dummy),
    .data_out(arpDataOut_TSTRB),
    .vld_out(regslice_both_arpDataOut_V_strb_V_U_vld_out),
    .ack_out(arpDataOut_TREADY),
    .apdone_blk(regslice_both_arpDataOut_V_strb_V_U_apdone_blk)
);

arp_server_regslice_both #(
    .DataWidth( 1 ))
regslice_both_arpDataOut_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(1'd1),
    .vld_in(arpDataOut_TVALID_int_regslice),
    .ack_in(regslice_both_arpDataOut_V_last_V_U_ack_in_dummy),
    .data_out(arpDataOut_TLAST),
    .vld_out(regslice_both_arpDataOut_V_last_V_U_vld_out),
    .ack_out(arpDataOut_TREADY),
    .apdone_blk(regslice_both_arpDataOut_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_nbreadreq_fu_156_p3 == 1'd1) & (aps_fsmState == 2'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        aps_fsmState <= 2'd1;
    end else if (((tmp_i_35_nbreadreq_fu_164_p3 == 1'd1) & (tmp_i_nbreadreq_fu_156_p3 == 1'd0) & (aps_fsmState == 2'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        aps_fsmState <= 2'd2;
    end else if ((((aps_fsmState_load_load_fu_203_p1 == 2'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((aps_fsmState_load_load_fu_203_p1 == 2'd2) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        aps_fsmState <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        aps_fsmState_load_reg_464 <= aps_fsmState;
        aps_fsmState_load_reg_464_pp0_iter1_reg <= aps_fsmState_load_reg_464;
        lhs_V_2_reg_468 <= myIpAddress;
        myMacAddress_read_reg_475 <= myMacAddress;
    end
end

always @ (posedge ap_clk) begin
    if (((aps_fsmState_load_load_fu_203_p1 == 2'd2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        auxQueryIP_V_1_reg_488 <= gatewayIP;
        rhs_V_reg_483 <= networkMask;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_35_nbreadreq_fu_164_p3 == 1'd1) & (tmp_i_nbreadreq_fu_156_p3 == 1'd0) & (aps_fsmState == 2'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        inputIP_V <= arpRequestFifo_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_i_nbreadreq_fu_156_p3 == 1'd1) & (aps_fsmState == 2'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        replyMeta_ethType_V <= {{arpReplyFifo_dout[79:64]}};
        replyMeta_hwAddrSrc_V <= {{arpReplyFifo_dout[175:128]}};
        replyMeta_hwLen_V <= {{arpReplyFifo_dout[119:112]}};
        replyMeta_hwType_V <= {{arpReplyFifo_dout[95:80]}};
        replyMeta_protoAddrSrc_V <= {{arpReplyFifo_dout[223:192]}};
        replyMeta_protoLen_V <= {{arpReplyFifo_dout[127:120]}};
        replyMeta_protoType_V <= {{arpReplyFifo_dout[111:96]}};
        replyMeta_srcMac_V <= trunc_ln145_fu_231_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((aps_fsmState_load_reg_464_pp0_iter1_reg == 2'd2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((aps_fsmState_load_reg_464_pp0_iter1_reg == 2'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((aps_fsmState_load_reg_464 == 2'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((aps_fsmState_load_reg_464 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        arpDataOut_TDATA_blk_n = arpDataOut_TREADY_int_regslice;
    end else begin
        arpDataOut_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_223)) begin
        if ((aps_fsmState_load_reg_464 == 2'd2)) begin
            arpDataOut_TDATA_int_regslice = p_Result_s_fu_446_p9;
        end else if ((aps_fsmState_load_reg_464 == 2'd1)) begin
            arpDataOut_TDATA_int_regslice = p_Result_1_fu_391_p14;
        end else begin
            arpDataOut_TDATA_int_regslice = 'bx;
        end
    end else begin
        arpDataOut_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((aps_fsmState_load_reg_464 == 2'd2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((aps_fsmState_load_reg_464 == 2'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        arpDataOut_TVALID_int_regslice = 1'b1;
    end else begin
        arpDataOut_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b0) & (ap_predicate_op31_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        arpReplyFifo_blk_n = arpReplyFifo_empty_n;
    end else begin
        arpReplyFifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op31_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        arpReplyFifo_read = 1'b1;
    end else begin
        arpReplyFifo_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b0) & (ap_predicate_op26_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        arpRequestFifo_blk_n = arpRequestFifo_empty_n;
    end else begin
        arpRequestFifo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_predicate_op26_read_state1 == 1'b1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        arpRequestFifo_read = 1'b1;
    end else begin
        arpRequestFifo_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln1049_fu_428_p2 = (xor_ln1049_fu_423_p2 & rhs_V_reg_483);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_arpDataOut_V_data_V_U_apdone_blk == 1'b1) | ((aps_fsmState_load_reg_464_pp0_iter1_reg == 2'd2) & (arpDataOut_TREADY_int_regslice == 1'b0)) | ((aps_fsmState_load_reg_464_pp0_iter1_reg == 2'd1) & (arpDataOut_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((aps_fsmState_load_reg_464 == 2'd2) & (arpDataOut_TREADY_int_regslice == 1'b0)) | ((aps_fsmState_load_reg_464 == 2'd1) & (arpDataOut_TREADY_int_regslice == 1'b0)))) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((ap_predicate_op31_read_state1 == 1'b1) & (arpReplyFifo_empty_n == 1'b0)) | ((ap_predicate_op26_read_state1 == 1'b1) & (arpRequestFifo_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_arpDataOut_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((aps_fsmState_load_reg_464_pp0_iter1_reg == 2'd2) & (arpDataOut_TREADY_int_regslice == 1'b0)) | ((aps_fsmState_load_reg_464_pp0_iter1_reg == 2'd1) & (arpDataOut_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((aps_fsmState_load_reg_464 == 2'd2) & (arpDataOut_TREADY_int_regslice == 1'b0)) | ((aps_fsmState_load_reg_464 == 2'd1) & (arpDataOut_TREADY_int_regslice == 1'b0)))) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((ap_predicate_op31_read_state1 == 1'b1) & (arpReplyFifo_empty_n == 1'b0)) | ((ap_predicate_op26_read_state1 == 1'b1) & (arpRequestFifo_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((regslice_both_arpDataOut_V_data_V_U_apdone_blk == 1'b1) | (1'b1 == ap_block_state3_io) | ((aps_fsmState_load_reg_464_pp0_iter1_reg == 2'd2) & (arpDataOut_TREADY_int_regslice == 1'b0)) | ((aps_fsmState_load_reg_464_pp0_iter1_reg == 2'd1) & (arpDataOut_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | ((aps_fsmState_load_reg_464 == 2'd2) & (arpDataOut_TREADY_int_regslice == 1'b0)) | ((aps_fsmState_load_reg_464 == 2'd1) & (arpDataOut_TREADY_int_regslice == 1'b0)))) | ((ap_start == 1'b1) & ((ap_done_reg == 1'b1) | ((ap_predicate_op31_read_state1 == 1'b1) & (arpReplyFifo_empty_n == 1'b0)) | ((ap_predicate_op26_read_state1 == 1'b1) & (arpRequestFifo_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_done_reg == 1'b1) | ((ap_predicate_op31_read_state1 == 1'b1) & (arpReplyFifo_empty_n == 1'b0)) | ((ap_predicate_op26_read_state1 == 1'b1) & (arpRequestFifo_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state2_io = (((aps_fsmState_load_reg_464 == 2'd2) & (arpDataOut_TREADY_int_regslice == 1'b0)) | ((aps_fsmState_load_reg_464 == 2'd1) & (arpDataOut_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((aps_fsmState_load_reg_464 == 2'd2) & (arpDataOut_TREADY_int_regslice == 1'b0)) | ((aps_fsmState_load_reg_464 == 2'd1) & (arpDataOut_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state3_io = (((aps_fsmState_load_reg_464_pp0_iter1_reg == 2'd2) & (arpDataOut_TREADY_int_regslice == 1'b0)) | ((aps_fsmState_load_reg_464_pp0_iter1_reg == 2'd1) & (arpDataOut_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = ((regslice_both_arpDataOut_V_data_V_U_apdone_blk == 1'b1) | ((aps_fsmState_load_reg_464_pp0_iter1_reg == 2'd2) & (arpDataOut_TREADY_int_regslice == 1'b0)) | ((aps_fsmState_load_reg_464_pp0_iter1_reg == 2'd1) & (arpDataOut_TREADY_int_regslice == 1'b0)));
end

always @ (*) begin
    ap_condition_223 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_predicate_op26_read_state1 = ((tmp_i_35_nbreadreq_fu_164_p3 == 1'd1) & (tmp_i_nbreadreq_fu_156_p3 == 1'd0) & (aps_fsmState == 2'd0));
end

always @ (*) begin
    ap_predicate_op31_read_state1 = ((tmp_i_nbreadreq_fu_156_p3 == 1'd1) & (aps_fsmState == 2'd0));
end

assign aps_fsmState_load_load_fu_203_p1 = aps_fsmState;

assign arpDataOut_TVALID = regslice_both_arpDataOut_V_data_V_U_vld_out;

assign auxQueryIP_V_2_fu_439_p3 = ((icmp_ln1049_fu_433_p2[0:0] == 1'b1) ? inputIP_V : auxQueryIP_V_1_reg_488);

assign icmp_ln1049_fu_433_p2 = ((and_ln1049_fu_428_p2 == 32'd0) ? 1'b1 : 1'b0);

assign p_Result_1_fu_391_p14 = {{{{{{{{{{{{{{{{{{{{{{{{176'd21438213421863513942334111744}, {replyMeta_protoAddrSrc_V}}}, {replyMeta_hwAddrSrc_V}}}, {lhs_V_2_reg_468}}}, {myMacAddress_read_reg_475}}}, {16'd512}}}, {replyMeta_protoLen_V}}}, {replyMeta_hwLen_V}}}, {replyMeta_protoType_V}}}, {replyMeta_hwType_V}}}, {replyMeta_ethType_V}}}, {myMacAddress_read_reg_475}}}, {replyMeta_srcMac_V}};

assign p_Result_s_fu_446_p9 = {{{{{{{{{{{{{{176'd21438213421863513942334111744}, {auxQueryIP_V_2_fu_439_p3}}}, {48'd0}}}, {lhs_V_2_reg_468}}}, {myMacAddress_read_reg_475}}}, {80'd4722656402130033706504}}}, {myMacAddress_read_reg_475}}}, {48'd281474976710655}};

assign tmp_i_35_nbreadreq_fu_164_p3 = arpRequestFifo_empty_n;

assign tmp_i_nbreadreq_fu_156_p3 = arpReplyFifo_empty_n;

assign trunc_ln145_fu_231_p1 = arpReplyFifo_dout[47:0];

assign xor_ln1049_fu_423_p2 = (lhs_V_2_reg_468 ^ inputIP_V);

endmodule //arp_server_arp_pkg_sender
