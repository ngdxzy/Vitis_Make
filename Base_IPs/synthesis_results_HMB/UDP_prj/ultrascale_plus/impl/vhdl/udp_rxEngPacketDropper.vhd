-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity udp_rxEngPacketDropper is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rthDropFifo_dout : IN STD_LOGIC_VECTOR (159 downto 0);
    rthDropFifo_empty_n : IN STD_LOGIC;
    rthDropFifo_read : OUT STD_LOGIC;
    ureDataPayload_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
    ureDataPayload_empty_n : IN STD_LOGIC;
    ureDataPayload_read : OUT STD_LOGIC;
    DataOutApp_TREADY : IN STD_LOGIC;
    DataOutApp_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    DataOutApp_TVALID : OUT STD_LOGIC;
    DataOutApp_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    DataOutApp_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    DataOutApp_TUSER : OUT STD_LOGIC_VECTOR (95 downto 0);
    DataOutApp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    DataOutApp_TDEST : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of udp_rxEngPacketDropper is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_23F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111111";
    constant ap_const_lv32_240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal tmp_i_nbreadreq_fu_98_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op19_read_state1 : BOOLEAN;
    signal tmp_i_112_nbreadreq_fu_112_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op37_read_state1 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal repd_state_load_reg_313 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_112_reg_324 : STD_LOGIC_VECTOR (0 downto 0);
    signal response_drop_V_load_reg_317 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op53_write_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal repd_state_load_reg_313_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_112_reg_324_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal response_drop_V_load_reg_317_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op54_write_state3 : BOOLEAN;
    signal regslice_both_DataOutApp_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal repd_state : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal response_drop_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal response_id_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal response_user_myIP_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal response_user_theirIP_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal response_user_myPort_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal response_user_theirPort_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal DataOutApp_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal rthDropFifo_blk_n : STD_LOGIC;
    signal ureDataPayload_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_27_fu_251_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_27_reg_328 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_28_reg_333 : STD_LOGIC_VECTOR (63 downto 0);
    signal currWord_last_V_fu_265_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal currWord_last_V_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln145_1_fu_157_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal DataOutApp_TVALID_int_regslice : STD_LOGIC;
    signal DataOutApp_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_DataOutApp_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_DataOutApp_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_DataOutApp_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_DataOutApp_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_DataOutApp_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_DataOutApp_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_DataOutApp_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_DataOutApp_V_user_V_U_apdone_blk : STD_LOGIC;
    signal DataOutApp_TUSER_int_regslice : STD_LOGIC_VECTOR (95 downto 0);
    signal regslice_both_DataOutApp_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_DataOutApp_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_DataOutApp_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_DataOutApp_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_DataOutApp_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_DataOutApp_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_DataOutApp_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_DataOutApp_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_condition_179 : BOOLEAN;
    signal ap_condition_176 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component udp_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_DataOutApp_V_data_V_U : component udp_regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => tmp_27_reg_328,
        vld_in => DataOutApp_TVALID_int_regslice,
        ack_in => DataOutApp_TREADY_int_regslice,
        data_out => DataOutApp_TDATA,
        vld_out => regslice_both_DataOutApp_V_data_V_U_vld_out,
        ack_out => DataOutApp_TREADY,
        apdone_blk => regslice_both_DataOutApp_V_data_V_U_apdone_blk);

    regslice_both_DataOutApp_V_keep_V_U : component udp_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => tmp_28_reg_333,
        vld_in => DataOutApp_TVALID_int_regslice,
        ack_in => regslice_both_DataOutApp_V_keep_V_U_ack_in_dummy,
        data_out => DataOutApp_TKEEP,
        vld_out => regslice_both_DataOutApp_V_keep_V_U_vld_out,
        ack_out => DataOutApp_TREADY,
        apdone_blk => regslice_both_DataOutApp_V_keep_V_U_apdone_blk);

    regslice_both_DataOutApp_V_strb_V_U : component udp_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv64_0,
        vld_in => DataOutApp_TVALID_int_regslice,
        ack_in => regslice_both_DataOutApp_V_strb_V_U_ack_in_dummy,
        data_out => DataOutApp_TSTRB,
        vld_out => regslice_both_DataOutApp_V_strb_V_U_vld_out,
        ack_out => DataOutApp_TREADY,
        apdone_blk => regslice_both_DataOutApp_V_strb_V_U_apdone_blk);

    regslice_both_DataOutApp_V_user_V_U : component udp_regslice_both
    generic map (
        DataWidth => 96)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => DataOutApp_TUSER_int_regslice,
        vld_in => DataOutApp_TVALID_int_regslice,
        ack_in => regslice_both_DataOutApp_V_user_V_U_ack_in_dummy,
        data_out => DataOutApp_TUSER,
        vld_out => regslice_both_DataOutApp_V_user_V_U_vld_out,
        ack_out => DataOutApp_TREADY,
        apdone_blk => regslice_both_DataOutApp_V_user_V_U_apdone_blk);

    regslice_both_DataOutApp_V_last_V_U : component udp_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => currWord_last_V_reg_338,
        vld_in => DataOutApp_TVALID_int_regslice,
        ack_in => regslice_both_DataOutApp_V_last_V_U_ack_in_dummy,
        data_out => DataOutApp_TLAST,
        vld_out => regslice_both_DataOutApp_V_last_V_U_vld_out,
        ack_out => DataOutApp_TREADY,
        apdone_blk => regslice_both_DataOutApp_V_last_V_U_apdone_blk);

    regslice_both_DataOutApp_V_dest_V_U : component udp_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => response_id_V,
        vld_in => DataOutApp_TVALID_int_regslice,
        ack_in => regslice_both_DataOutApp_V_dest_V_U_ack_in_dummy,
        data_out => DataOutApp_TDEST,
        vld_out => regslice_both_DataOutApp_V_dest_V_U_vld_out,
        ack_out => DataOutApp_TREADY,
        apdone_blk => regslice_both_DataOutApp_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    repd_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_176)) then
                if ((ap_const_boolean_1 = ap_condition_179)) then 
                    repd_state <= ap_const_lv1_0;
                elsif (((tmp_i_nbreadreq_fu_98_p3 = ap_const_lv1_1) and (repd_state = ap_const_lv1_0))) then 
                    repd_state <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_112_nbreadreq_fu_112_p3 = ap_const_lv1_1) and (repd_state = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                currWord_last_V_reg_338 <= ureDataPayload_dout(576 downto 576);
                tmp_27_reg_328 <= tmp_27_fu_251_p1;
                tmp_28_reg_333 <= ureDataPayload_dout(575 downto 512);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                repd_state_load_reg_313 <= repd_state;
                repd_state_load_reg_313_pp0_iter1_reg <= repd_state_load_reg_313;
                response_drop_V_load_reg_317 <= response_drop_V;
                response_drop_V_load_reg_317_pp0_iter1_reg <= response_drop_V_load_reg_317;
                tmp_i_112_reg_324_pp0_iter1_reg <= tmp_i_112_reg_324;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_nbreadreq_fu_98_p3 = ap_const_lv1_1) and (repd_state = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                response_drop_V <= rthDropFifo_dout(128 downto 128);
                response_id_V <= trunc_ln145_1_fu_157_p1;
                response_user_myIP_V <= rthDropFifo_dout(63 downto 32);
                response_user_myPort_V <= rthDropFifo_dout(111 downto 96);
                response_user_theirIP_V <= rthDropFifo_dout(95 downto 64);
                response_user_theirPort_V <= rthDropFifo_dout(127 downto 112);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((repd_state = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_i_112_reg_324 <= tmp_i_112_nbreadreq_fu_112_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    DataOutApp_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_predicate_op53_write_state2, ap_predicate_op54_write_state3, ap_block_pp0_stage0, DataOutApp_TREADY_int_regslice)
    begin
        if ((((ap_predicate_op54_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_predicate_op53_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            DataOutApp_TDATA_blk_n <= DataOutApp_TREADY_int_regslice;
        else 
            DataOutApp_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    DataOutApp_TUSER_int_regslice <= (((response_user_myIP_V & response_user_theirIP_V) & response_user_myPort_V) & response_user_theirPort_V);
    DataOutApp_TVALID <= regslice_both_DataOutApp_V_data_V_U_vld_out;

    DataOutApp_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op53_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op53_write_state2 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            DataOutApp_TVALID_int_regslice <= ap_const_logic_1;
        else 
            DataOutApp_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, rthDropFifo_empty_n, ap_predicate_op19_read_state1, ureDataPayload_empty_n, ap_predicate_op37_read_state1, ap_done_reg, ap_predicate_op53_write_state2, ap_predicate_op54_write_state3, regslice_both_DataOutApp_V_data_V_U_apdone_blk, DataOutApp_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op53_write_state2 = ap_const_boolean_1) and (ap_const_logic_0 = DataOutApp_TREADY_int_regslice) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op37_read_state1 = ap_const_boolean_1) and (ureDataPayload_empty_n = ap_const_logic_0)) or ((ap_predicate_op19_read_state1 = ap_const_boolean_1) and (rthDropFifo_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((regslice_both_DataOutApp_V_data_V_U_apdone_blk = ap_const_logic_1) or ((ap_predicate_op54_write_state3 = ap_const_boolean_1) and (ap_const_logic_0 = DataOutApp_TREADY_int_regslice)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, rthDropFifo_empty_n, ap_predicate_op19_read_state1, ureDataPayload_empty_n, ap_predicate_op37_read_state1, ap_done_reg, ap_predicate_op53_write_state2, ap_block_state2_io, ap_predicate_op54_write_state3, regslice_both_DataOutApp_V_data_V_U_apdone_blk, ap_block_state3_io, DataOutApp_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((ap_predicate_op53_write_state2 = ap_const_boolean_1) and (ap_const_logic_0 = DataOutApp_TREADY_int_regslice)))) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op37_read_state1 = ap_const_boolean_1) and (ureDataPayload_empty_n = ap_const_logic_0)) or ((ap_predicate_op19_read_state1 = ap_const_boolean_1) and (rthDropFifo_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((regslice_both_DataOutApp_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state3_io) or ((ap_predicate_op54_write_state3 = ap_const_boolean_1) and (ap_const_logic_0 = DataOutApp_TREADY_int_regslice)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, rthDropFifo_empty_n, ap_predicate_op19_read_state1, ureDataPayload_empty_n, ap_predicate_op37_read_state1, ap_done_reg, ap_predicate_op53_write_state2, ap_block_state2_io, ap_predicate_op54_write_state3, regslice_both_DataOutApp_V_data_V_U_apdone_blk, ap_block_state3_io, DataOutApp_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((ap_predicate_op53_write_state2 = ap_const_boolean_1) and (ap_const_logic_0 = DataOutApp_TREADY_int_regslice)))) or ((ap_start = ap_const_logic_1) and ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op37_read_state1 = ap_const_boolean_1) and (ureDataPayload_empty_n = ap_const_logic_0)) or ((ap_predicate_op19_read_state1 = ap_const_boolean_1) and (rthDropFifo_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((regslice_both_DataOutApp_V_data_V_U_apdone_blk = ap_const_logic_1) or (ap_const_boolean_1 = ap_block_state3_io) or ((ap_predicate_op54_write_state3 = ap_const_boolean_1) and (ap_const_logic_0 = DataOutApp_TREADY_int_regslice)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(rthDropFifo_empty_n, ap_predicate_op19_read_state1, ureDataPayload_empty_n, ap_predicate_op37_read_state1, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_done_reg = ap_const_logic_1) or ((ap_predicate_op37_read_state1 = ap_const_boolean_1) and (ureDataPayload_empty_n = ap_const_logic_0)) or ((ap_predicate_op19_read_state1 = ap_const_boolean_1) and (rthDropFifo_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state2_io_assign_proc : process(ap_predicate_op53_write_state2, DataOutApp_TREADY_int_regslice)
    begin
                ap_block_state2_io <= ((ap_predicate_op53_write_state2 = ap_const_boolean_1) and (ap_const_logic_0 = DataOutApp_TREADY_int_regslice));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(ap_predicate_op53_write_state2, DataOutApp_TREADY_int_regslice)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((ap_predicate_op53_write_state2 = ap_const_boolean_1) and (ap_const_logic_0 = DataOutApp_TREADY_int_regslice));
    end process;


    ap_block_state3_io_assign_proc : process(ap_predicate_op54_write_state3, DataOutApp_TREADY_int_regslice)
    begin
                ap_block_state3_io <= ((ap_predicate_op54_write_state3 = ap_const_boolean_1) and (ap_const_logic_0 = DataOutApp_TREADY_int_regslice));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(ap_predicate_op54_write_state3, regslice_both_DataOutApp_V_data_V_U_apdone_blk, DataOutApp_TREADY_int_regslice)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((regslice_both_DataOutApp_V_data_V_U_apdone_blk = ap_const_logic_1) or ((ap_predicate_op54_write_state3 = ap_const_boolean_1) and (ap_const_logic_0 = DataOutApp_TREADY_int_regslice)));
    end process;


    ap_condition_176_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_176 <= ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_179_assign_proc : process(tmp_i_112_nbreadreq_fu_112_p3, repd_state, currWord_last_V_fu_265_p3)
    begin
                ap_condition_179 <= ((tmp_i_112_nbreadreq_fu_112_p3 = ap_const_lv1_1) and (repd_state = ap_const_lv1_1) and (currWord_last_V_fu_265_p3 = ap_const_lv1_1));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_done_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op19_read_state1_assign_proc : process(tmp_i_nbreadreq_fu_98_p3, repd_state)
    begin
                ap_predicate_op19_read_state1 <= ((tmp_i_nbreadreq_fu_98_p3 = ap_const_lv1_1) and (repd_state = ap_const_lv1_0));
    end process;


    ap_predicate_op37_read_state1_assign_proc : process(tmp_i_112_nbreadreq_fu_112_p3, repd_state)
    begin
                ap_predicate_op37_read_state1 <= ((tmp_i_112_nbreadreq_fu_112_p3 = ap_const_lv1_1) and (repd_state = ap_const_lv1_1));
    end process;


    ap_predicate_op53_write_state2_assign_proc : process(repd_state_load_reg_313, tmp_i_112_reg_324, response_drop_V_load_reg_317)
    begin
                ap_predicate_op53_write_state2 <= ((response_drop_V_load_reg_317 = ap_const_lv1_0) and (tmp_i_112_reg_324 = ap_const_lv1_1) and (repd_state_load_reg_313 = ap_const_lv1_1));
    end process;


    ap_predicate_op54_write_state3_assign_proc : process(repd_state_load_reg_313_pp0_iter1_reg, tmp_i_112_reg_324_pp0_iter1_reg, response_drop_V_load_reg_317_pp0_iter1_reg)
    begin
                ap_predicate_op54_write_state3 <= ((response_drop_V_load_reg_317_pp0_iter1_reg = ap_const_lv1_0) and (tmp_i_112_reg_324_pp0_iter1_reg = ap_const_lv1_1) and (repd_state_load_reg_313_pp0_iter1_reg = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    currWord_last_V_fu_265_p3 <= ureDataPayload_dout(576 downto 576);

    rthDropFifo_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, rthDropFifo_empty_n, ap_predicate_op19_read_state1, ap_done_reg, ap_block_pp0_stage0)
    begin
        if (((ap_done_reg = ap_const_logic_0) and (ap_predicate_op19_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            rthDropFifo_blk_n <= rthDropFifo_empty_n;
        else 
            rthDropFifo_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    rthDropFifo_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op19_read_state1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op19_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            rthDropFifo_read <= ap_const_logic_1;
        else 
            rthDropFifo_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_27_fu_251_p1 <= ureDataPayload_dout(512 - 1 downto 0);
    tmp_i_112_nbreadreq_fu_112_p3 <= (0=>(ureDataPayload_empty_n), others=>'-');
    tmp_i_nbreadreq_fu_98_p3 <= (0=>(rthDropFifo_empty_n), others=>'-');
    trunc_ln145_1_fu_157_p1 <= rthDropFifo_dout(16 - 1 downto 0);

    ureDataPayload_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ureDataPayload_empty_n, ap_predicate_op37_read_state1, ap_done_reg, ap_block_pp0_stage0)
    begin
        if (((ap_done_reg = ap_const_logic_0) and (ap_predicate_op37_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ureDataPayload_blk_n <= ureDataPayload_empty_n;
        else 
            ureDataPayload_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ureDataPayload_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_predicate_op37_read_state1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op37_read_state1 = ap_const_boolean_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ureDataPayload_read <= ap_const_logic_1;
        else 
            ureDataPayload_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
