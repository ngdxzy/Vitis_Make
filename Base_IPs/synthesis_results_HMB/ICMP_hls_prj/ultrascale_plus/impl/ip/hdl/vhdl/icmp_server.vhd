-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity icmp_server is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axis_icmp_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    s_axis_icmp_TVALID : IN STD_LOGIC;
    s_axis_icmp_TREADY : OUT STD_LOGIC;
    s_axis_icmp_TKEEP : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_icmp_TSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_icmp_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    myIpAddress : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axis_icmp_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    m_axis_icmp_TVALID : OUT STD_LOGIC;
    m_axis_icmp_TREADY : IN STD_LOGIC;
    m_axis_icmp_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_icmp_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_icmp_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of icmp_server is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "icmp_server_icmp_server,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=3.100000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.372813,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1481,HLS_SYN_LUT=570,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_B7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110111";
    constant ap_const_lv17_800 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal myIpAddress_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal myIpAddress_0_vld_reg : STD_LOGIC := '0';
    signal myIpAddress_0_ack_out : STD_LOGIC;
    signal aiFSMState : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal ipDestination_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal icmpType_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal icmpCode_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal auxInchecksum_r_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal prevWord_last_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal icmpChecksum_V : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal prevWord_data_V : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal prevWord_keep_V : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal prevWord_strb_V : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_axis_icmp_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal aiFSMState_load_load_fu_276_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_nbreadreq_fu_212_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_icmp_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal aiFSMState_load_reg_1142 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal aiFSMState_load_reg_1142_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_reg_1156 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1156_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op12_read_state1 : BOOLEAN;
    signal ap_predicate_op24_read_state1 : BOOLEAN;
    signal ap_predicate_op38_read_state1 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op131_write_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_predicate_op179_write_state3 : BOOLEAN;
    signal regslice_both_m_axis_icmp_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ipDestination_V_load_reg_1146 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_1151 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_1160 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_16_reg_1165 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_reg_1170 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_272_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_1175 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_1_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_1_reg_1186 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_2_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_2_reg_1191 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1196 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_14_fu_764_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_14_reg_1200 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_17_fu_806_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_17_reg_1205 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_35_fu_1000_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal select_ln170_fu_1040_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_aiFSMState_load : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln202_fu_308_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal checksum_fu_1130_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln320_fu_680_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal trunc_ln674_1_fu_334_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_9_fu_338_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_10_fu_356_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_11_fu_366_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_12_fu_384_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_13_fu_394_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_14_fu_412_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_15_fu_422_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_16_fu_440_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_17_fu_450_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_18_fu_468_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_19_fu_478_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_20_fu_496_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_21_fu_506_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_22_fu_524_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_23_fu_534_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_24_fu_552_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_25_fu_562_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_32_fu_658_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_31_fu_648_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_668_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln320_fu_676_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_26_fu_580_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_27_fu_590_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal checksumL0_V_fu_692_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal checksumL0_V_10_fu_572_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln225_1_fu_704_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln225_fu_700_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal checksumL0_V_11_fu_544_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal checksumL0_V_12_fu_516_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln225_3_fu_718_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln225_2_fu_714_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal checksumL0_V_13_fu_488_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal checksumL0_V_14_fu_460_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln225_5_fu_732_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln225_4_fu_728_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal checksumL0_V_15_fu_432_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal checksumL0_V_16_fu_404_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln225_7_fu_746_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln225_6_fu_742_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal checksumL0_V_17_fu_376_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal checksumL0_V_18_fu_348_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln225_9_fu_760_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln225_8_fu_756_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_10_fu_708_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_11_fu_722_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln225_11_fu_774_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln225_10_fu_770_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_12_fu_736_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_13_fu_750_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln225_13_fu_788_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln225_12_fu_784_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_15_fu_778_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_16_fu_792_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln225_15_fu_802_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln225_14_fu_798_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_1_fu_860_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_3_fu_872_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_4_fu_884_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_s_26_fu_896_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_fu_906_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_2_fu_918_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_948_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln217_2_fu_956_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_8_fu_944_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_7_fu_928_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal icmpChecksumTmp_V_fu_960_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln674_fu_988_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_fu_978_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_34_fu_966_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_1_fu_992_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln1049_fu_1013_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1049_3_fu_1018_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln170_1_fu_1029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln170_fu_1024_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln170_2_fu_1034_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln225_16_fu_1054_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln225_17_fu_1057_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_18_fu_1060_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal trunc_ln357_fu_1066_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_33_fu_1070_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln217_fu_1080_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln217_1_fu_1084_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln217_3_fu_1088_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln45_fu_1098_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal checksumL4_r_V_fu_1092_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_s_fu_1110_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal checksumL4_o_V_fu_1104_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln649_fu_1118_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln819_fu_1122_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_s_axis_icmp_V_data_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_icmp_TDATA_int_regslice : STD_LOGIC_VECTOR (511 downto 0);
    signal s_axis_icmp_TVALID_int_regslice : STD_LOGIC;
    signal s_axis_icmp_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_s_axis_icmp_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_icmp_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_icmp_TKEEP_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_s_axis_icmp_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_icmp_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_icmp_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_icmp_TSTRB_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_s_axis_icmp_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_icmp_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_s_axis_icmp_V_last_V_U_apdone_blk : STD_LOGIC;
    signal s_axis_icmp_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_s_axis_icmp_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_s_axis_icmp_V_last_V_U_ack_in : STD_LOGIC;
    signal m_axis_icmp_TDATA_int_regslice : STD_LOGIC_VECTOR (511 downto 0);
    signal m_axis_icmp_TVALID_int_regslice : STD_LOGIC;
    signal m_axis_icmp_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_m_axis_icmp_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_icmp_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal m_axis_icmp_TKEEP_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_m_axis_icmp_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_icmp_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_icmp_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal m_axis_icmp_TSTRB_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal regslice_both_m_axis_icmp_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_icmp_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_m_axis_icmp_V_last_V_U_apdone_blk : STD_LOGIC;
    signal m_axis_icmp_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_m_axis_icmp_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_m_axis_icmp_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_condition_276 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component icmp_server_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_s_axis_icmp_V_data_V_U : component icmp_server_regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_icmp_TDATA,
        vld_in => s_axis_icmp_TVALID,
        ack_in => regslice_both_s_axis_icmp_V_data_V_U_ack_in,
        data_out => s_axis_icmp_TDATA_int_regslice,
        vld_out => s_axis_icmp_TVALID_int_regslice,
        ack_out => s_axis_icmp_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_icmp_V_data_V_U_apdone_blk);

    regslice_both_s_axis_icmp_V_keep_V_U : component icmp_server_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_icmp_TKEEP,
        vld_in => s_axis_icmp_TVALID,
        ack_in => regslice_both_s_axis_icmp_V_keep_V_U_ack_in,
        data_out => s_axis_icmp_TKEEP_int_regslice,
        vld_out => regslice_both_s_axis_icmp_V_keep_V_U_vld_out,
        ack_out => s_axis_icmp_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_icmp_V_keep_V_U_apdone_blk);

    regslice_both_s_axis_icmp_V_strb_V_U : component icmp_server_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_icmp_TSTRB,
        vld_in => s_axis_icmp_TVALID,
        ack_in => regslice_both_s_axis_icmp_V_strb_V_U_ack_in,
        data_out => s_axis_icmp_TSTRB_int_regslice,
        vld_out => regslice_both_s_axis_icmp_V_strb_V_U_vld_out,
        ack_out => s_axis_icmp_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_icmp_V_strb_V_U_apdone_blk);

    regslice_both_s_axis_icmp_V_last_V_U : component icmp_server_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => s_axis_icmp_TLAST,
        vld_in => s_axis_icmp_TVALID,
        ack_in => regslice_both_s_axis_icmp_V_last_V_U_ack_in,
        data_out => s_axis_icmp_TLAST_int_regslice,
        vld_out => regslice_both_s_axis_icmp_V_last_V_U_vld_out,
        ack_out => s_axis_icmp_TREADY_int_regslice,
        apdone_blk => regslice_both_s_axis_icmp_V_last_V_U_apdone_blk);

    regslice_both_m_axis_icmp_V_data_V_U : component icmp_server_regslice_both
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => m_axis_icmp_TDATA_int_regslice,
        vld_in => m_axis_icmp_TVALID_int_regslice,
        ack_in => m_axis_icmp_TREADY_int_regslice,
        data_out => m_axis_icmp_TDATA,
        vld_out => regslice_both_m_axis_icmp_V_data_V_U_vld_out,
        ack_out => m_axis_icmp_TREADY,
        apdone_blk => regslice_both_m_axis_icmp_V_data_V_U_apdone_blk);

    regslice_both_m_axis_icmp_V_keep_V_U : component icmp_server_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => m_axis_icmp_TKEEP_int_regslice,
        vld_in => m_axis_icmp_TVALID_int_regslice,
        ack_in => regslice_both_m_axis_icmp_V_keep_V_U_ack_in_dummy,
        data_out => m_axis_icmp_TKEEP,
        vld_out => regslice_both_m_axis_icmp_V_keep_V_U_vld_out,
        ack_out => m_axis_icmp_TREADY,
        apdone_blk => regslice_both_m_axis_icmp_V_keep_V_U_apdone_blk);

    regslice_both_m_axis_icmp_V_strb_V_U : component icmp_server_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => m_axis_icmp_TSTRB_int_regslice,
        vld_in => m_axis_icmp_TVALID_int_regslice,
        ack_in => regslice_both_m_axis_icmp_V_strb_V_U_ack_in_dummy,
        data_out => m_axis_icmp_TSTRB,
        vld_out => regslice_both_m_axis_icmp_V_strb_V_U_vld_out,
        ack_out => m_axis_icmp_TREADY,
        apdone_blk => regslice_both_m_axis_icmp_V_strb_V_U_apdone_blk);

    regslice_both_m_axis_icmp_V_last_V_U : component icmp_server_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => m_axis_icmp_TLAST_int_regslice,
        vld_in => m_axis_icmp_TVALID_int_regslice,
        ack_in => regslice_both_m_axis_icmp_V_last_V_U_ack_in_dummy,
        data_out => m_axis_icmp_TLAST,
        vld_out => regslice_both_m_axis_icmp_V_last_V_U_vld_out,
        ack_out => m_axis_icmp_TREADY,
        apdone_blk => regslice_both_m_axis_icmp_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    aiFSMState_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nbreadreq_fu_212_p6 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                aiFSMState <= ap_const_lv3_1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv3_2 = aiFSMState_load_load_fu_276_p1))) then 
                aiFSMState <= select_ln202_fu_308_p3;
            elsif ((((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_3) and (grp_nbreadreq_fu_212_p6 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (grp_fu_272_p1 = ap_const_lv1_1)) or ((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_4) and (grp_nbreadreq_fu_212_p6 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (grp_fu_272_p1 = ap_const_lv1_1)))) then 
                aiFSMState <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv3_1 = aiFSMState_load_reg_1142))) then 
                aiFSMState <= select_ln170_fu_1040_p3;
            end if; 
        end if;
    end process;

    myIpAddress_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                aiFSMState_load_reg_1142 <= ap_sig_allocacmp_aiFSMState_load;
                aiFSMState_load_reg_1142_pp0_iter1_reg <= aiFSMState_load_reg_1142;
                ipDestination_V_load_reg_1146 <= ipDestination_V;
                tmp_7_reg_1156_pp0_iter1_reg <= tmp_7_reg_1156;
                tmp_8_reg_1151 <= prevWord_last_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_lv3_0 = aiFSMState_load_reg_1142) and (tmp_reg_1196 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                auxInchecksum_r_V <= checksum_fu_1130_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nbreadreq_fu_212_p6 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmpChecksum_V <= add_ln320_fu_680_p2;
                icmpCode_V <= s_axis_icmp_TDATA_int_regslice(175 downto 168);
                icmpType_V <= s_axis_icmp_TDATA_int_regslice(167 downto 160);
                ipDestination_V <= s_axis_icmp_TDATA_int_regslice(159 downto 128);
                prevWord_data_V <= s_axis_icmp_TDATA_int_regslice;
                prevWord_keep_V <= s_axis_icmp_TKEEP_int_regslice;
                prevWord_last_V <= s_axis_icmp_TLAST_int_regslice;
                prevWord_strb_V <= s_axis_icmp_TSTRB_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv3_1 = aiFSMState_load_load_fu_276_p1))) then
                icmp_ln1049_1_reg_1186 <= icmp_ln1049_1_fu_322_p2;
                icmp_ln1049_2_reg_1191 <= icmp_ln1049_2_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((myIpAddress_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (myIpAddress_0_vld_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (myIpAddress_0_vld_reg = ap_const_logic_0)))) then
                myIpAddress_0_data_reg <= myIpAddress;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_nbreadreq_fu_212_p6 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ret_14_reg_1200 <= ret_14_fu_764_p2;
                ret_17_reg_1205 <= ret_17_fu_806_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_3) and (grp_nbreadreq_fu_212_p6 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_15_reg_1160 <= s_axis_icmp_TDATA_int_regslice;
                tmp_16_reg_1165 <= s_axis_icmp_TKEEP_int_regslice;
                tmp_17_reg_1170 <= s_axis_icmp_TSTRB_int_regslice;
                tmp_19_reg_1175 <= s_axis_icmp_TLAST_int_regslice;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_7_reg_1156 <= grp_nbreadreq_fu_212_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_reg_1196 <= grp_nbreadreq_fu_212_p6;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln320_fu_680_p2 <= std_logic_vector(unsigned(zext_ln320_fu_676_p1) + unsigned(ap_const_lv17_800));
    add_ln45_fu_1098_p2 <= std_logic_vector(unsigned(trunc_ln357_fu_1066_p1) + unsigned(zext_ln217_3_fu_1088_p1));
    aiFSMState_load_load_fu_276_p1 <= ap_sig_allocacmp_aiFSMState_load;
    and_ln170_1_fu_1029_p2 <= (icmp_ln1049_3_fu_1018_p2 and icmp_ln1049_2_reg_1191);
    and_ln170_2_fu_1034_p2 <= (and_ln170_fu_1024_p2 and and_ln170_1_fu_1029_p2);
    and_ln170_fu_1024_p2 <= (icmp_ln1049_fu_1013_p2 and icmp_ln1049_1_reg_1186);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, aiFSMState_load_reg_1142, ap_enable_reg_pp0_iter2, aiFSMState_load_reg_1142_pp0_iter1_reg, ap_predicate_op12_read_state1, ap_predicate_op24_read_state1, ap_predicate_op38_read_state1, ap_predicate_op131_write_state2, ap_predicate_op179_write_state3, regslice_both_m_axis_icmp_V_data_V_U_apdone_blk, s_axis_icmp_TVALID_int_regslice, m_axis_icmp_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op131_write_state2 = ap_const_boolean_1)) or ((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv3_2 = aiFSMState_load_reg_1142)))) or ((ap_const_logic_1 = ap_const_logic_1) and (((s_axis_icmp_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op38_read_state1 = ap_const_boolean_1)) or ((s_axis_icmp_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op24_read_state1 = ap_const_boolean_1)) or ((s_axis_icmp_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((regslice_both_m_axis_icmp_V_data_V_U_apdone_blk = ap_const_logic_1) or ((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op179_write_state3 = ap_const_boolean_1)) or ((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv3_2 = aiFSMState_load_reg_1142_pp0_iter1_reg)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, aiFSMState_load_reg_1142, ap_enable_reg_pp0_iter2, aiFSMState_load_reg_1142_pp0_iter1_reg, ap_predicate_op12_read_state1, ap_predicate_op24_read_state1, ap_predicate_op38_read_state1, ap_predicate_op131_write_state2, ap_block_state2_io, ap_predicate_op179_write_state3, regslice_both_m_axis_icmp_V_data_V_U_apdone_blk, ap_block_state3_io, s_axis_icmp_TVALID_int_regslice, m_axis_icmp_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op131_write_state2 = ap_const_boolean_1)) or ((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv3_2 = aiFSMState_load_reg_1142)))) or ((ap_const_logic_1 = ap_const_logic_1) and (((s_axis_icmp_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op38_read_state1 = ap_const_boolean_1)) or ((s_axis_icmp_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op24_read_state1 = ap_const_boolean_1)) or ((s_axis_icmp_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or (regslice_both_m_axis_icmp_V_data_V_U_apdone_blk = ap_const_logic_1) or ((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op179_write_state3 = ap_const_boolean_1)) or ((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv3_2 = aiFSMState_load_reg_1142_pp0_iter1_reg)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, aiFSMState_load_reg_1142, ap_enable_reg_pp0_iter2, aiFSMState_load_reg_1142_pp0_iter1_reg, ap_predicate_op12_read_state1, ap_predicate_op24_read_state1, ap_predicate_op38_read_state1, ap_predicate_op131_write_state2, ap_block_state2_io, ap_predicate_op179_write_state3, regslice_both_m_axis_icmp_V_data_V_U_apdone_blk, ap_block_state3_io, s_axis_icmp_TVALID_int_regslice, m_axis_icmp_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or ((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op131_write_state2 = ap_const_boolean_1)) or ((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv3_2 = aiFSMState_load_reg_1142)))) or ((ap_const_logic_1 = ap_const_logic_1) and (((s_axis_icmp_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op38_read_state1 = ap_const_boolean_1)) or ((s_axis_icmp_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op24_read_state1 = ap_const_boolean_1)) or ((s_axis_icmp_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1)))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or (regslice_both_m_axis_icmp_V_data_V_U_apdone_blk = ap_const_logic_1) or ((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op179_write_state3 = ap_const_boolean_1)) or ((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv3_2 = aiFSMState_load_reg_1142_pp0_iter1_reg)))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_predicate_op12_read_state1, ap_predicate_op24_read_state1, ap_predicate_op38_read_state1, s_axis_icmp_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (((s_axis_icmp_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op38_read_state1 = ap_const_boolean_1)) or ((s_axis_icmp_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op24_read_state1 = ap_const_boolean_1)) or ((s_axis_icmp_TVALID_int_regslice = ap_const_logic_0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1)));
    end process;


    ap_block_state2_io_assign_proc : process(aiFSMState_load_reg_1142, ap_predicate_op131_write_state2, m_axis_icmp_TREADY_int_regslice)
    begin
                ap_block_state2_io <= (((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op131_write_state2 = ap_const_boolean_1)) or ((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv3_2 = aiFSMState_load_reg_1142)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(aiFSMState_load_reg_1142, ap_predicate_op131_write_state2, m_axis_icmp_TREADY_int_regslice)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op131_write_state2 = ap_const_boolean_1)) or ((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv3_2 = aiFSMState_load_reg_1142)));
    end process;


    ap_block_state3_io_assign_proc : process(aiFSMState_load_reg_1142_pp0_iter1_reg, ap_predicate_op179_write_state3, m_axis_icmp_TREADY_int_regslice)
    begin
                ap_block_state3_io <= (((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op179_write_state3 = ap_const_boolean_1)) or ((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv3_2 = aiFSMState_load_reg_1142_pp0_iter1_reg)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(aiFSMState_load_reg_1142_pp0_iter1_reg, ap_predicate_op179_write_state3, regslice_both_m_axis_icmp_V_data_V_U_apdone_blk, m_axis_icmp_TREADY_int_regslice)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((regslice_both_m_axis_icmp_V_data_V_U_apdone_blk = ap_const_logic_1) or ((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_predicate_op179_write_state3 = ap_const_boolean_1)) or ((m_axis_icmp_TREADY_int_regslice = ap_const_logic_0) and (ap_const_lv3_2 = aiFSMState_load_reg_1142_pp0_iter1_reg)));
    end process;


    ap_condition_276_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_01001)
    begin
                ap_condition_276 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op12_read_state1_assign_proc : process(grp_nbreadreq_fu_212_p6, ap_sig_allocacmp_aiFSMState_load)
    begin
                ap_predicate_op12_read_state1 <= ((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_3) and (grp_nbreadreq_fu_212_p6 = ap_const_lv1_1));
    end process;


    ap_predicate_op131_write_state2_assign_proc : process(aiFSMState_load_reg_1142, tmp_7_reg_1156)
    begin
                ap_predicate_op131_write_state2 <= ((ap_const_lv3_3 = aiFSMState_load_reg_1142) and (tmp_7_reg_1156 = ap_const_lv1_1));
    end process;


    ap_predicate_op179_write_state3_assign_proc : process(aiFSMState_load_reg_1142_pp0_iter1_reg, tmp_7_reg_1156_pp0_iter1_reg)
    begin
                ap_predicate_op179_write_state3 <= ((ap_const_lv3_3 = aiFSMState_load_reg_1142_pp0_iter1_reg) and (tmp_7_reg_1156_pp0_iter1_reg = ap_const_lv1_1));
    end process;


    ap_predicate_op24_read_state1_assign_proc : process(grp_nbreadreq_fu_212_p6, ap_sig_allocacmp_aiFSMState_load)
    begin
                ap_predicate_op24_read_state1 <= ((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_4) and (grp_nbreadreq_fu_212_p6 = ap_const_lv1_1));
    end process;


    ap_predicate_op38_read_state1_assign_proc : process(grp_nbreadreq_fu_212_p6, ap_sig_allocacmp_aiFSMState_load)
    begin
                ap_predicate_op38_read_state1 <= ((grp_nbreadreq_fu_212_p6 = ap_const_lv1_1) and (ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_0));
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_aiFSMState_load_assign_proc : process(aiFSMState, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, aiFSMState_load_reg_1142, select_ln170_fu_1040_p3)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv3_1 = aiFSMState_load_reg_1142))) then 
            ap_sig_allocacmp_aiFSMState_load <= select_ln170_fu_1040_p3;
        else 
            ap_sig_allocacmp_aiFSMState_load <= aiFSMState;
        end if; 
    end process;

    checksumL0_V_10_fu_572_p3 <= (p_Result_24_fu_552_p4 & p_Result_25_fu_562_p4);
    checksumL0_V_11_fu_544_p3 <= (p_Result_22_fu_524_p4 & p_Result_23_fu_534_p4);
    checksumL0_V_12_fu_516_p3 <= (p_Result_20_fu_496_p4 & p_Result_21_fu_506_p4);
    checksumL0_V_13_fu_488_p3 <= (p_Result_18_fu_468_p4 & p_Result_19_fu_478_p4);
    checksumL0_V_14_fu_460_p3 <= (p_Result_16_fu_440_p4 & p_Result_17_fu_450_p4);
    checksumL0_V_15_fu_432_p3 <= (p_Result_14_fu_412_p4 & p_Result_15_fu_422_p4);
    checksumL0_V_16_fu_404_p3 <= (p_Result_12_fu_384_p4 & p_Result_13_fu_394_p4);
    checksumL0_V_17_fu_376_p3 <= (p_Result_10_fu_356_p4 & p_Result_11_fu_366_p4);
    checksumL0_V_18_fu_348_p3 <= (trunc_ln674_1_fu_334_p1 & p_Result_9_fu_338_p4);
    checksumL0_V_fu_692_p3 <= (p_Result_26_fu_580_p4 & p_Result_27_fu_590_p4);
    checksumL4_o_V_fu_1104_p2 <= std_logic_vector(unsigned(add_ln45_fu_1098_p2) + unsigned(ap_const_lv16_1));
    checksumL4_r_V_fu_1092_p2 <= std_logic_vector(unsigned(zext_ln217_fu_1080_p1) + unsigned(zext_ln217_1_fu_1084_p1));
    checksum_fu_1130_p2 <= (select_ln819_fu_1122_p3 xor ap_const_lv16_FFFF);
    grp_fu_272_p1 <= s_axis_icmp_TLAST_int_regslice;
    grp_nbreadreq_fu_212_p6 <= (0=>(s_axis_icmp_TVALID_int_regslice), others=>'-');
    icmpChecksumTmp_V_fu_960_p2 <= std_logic_vector(unsigned(zext_ln217_2_fu_956_p1) + unsigned(p_Result_8_fu_944_p1));
    icmp_ln1049_1_fu_322_p2 <= "1" when (icmpType_V = ap_const_lv8_8) else "0";
    icmp_ln1049_2_fu_328_p2 <= "1" when (icmpCode_V = ap_const_lv8_0) else "0";
    icmp_ln1049_3_fu_1018_p2 <= "1" when (auxInchecksum_r_V = ap_const_lv16_0) else "0";
    icmp_ln1049_fu_1013_p2 <= "1" when (ipDestination_V_load_reg_1146 = myIpAddress_0_data_reg) else "0";

    m_axis_icmp_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, aiFSMState_load_reg_1142, ap_enable_reg_pp0_iter2, aiFSMState_load_reg_1142_pp0_iter1_reg, tmp_7_reg_1156, tmp_7_reg_1156_pp0_iter1_reg, m_axis_icmp_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv3_2 = aiFSMState_load_reg_1142)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_lv3_3 = aiFSMState_load_reg_1142) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_7_reg_1156 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv3_2 = aiFSMState_load_reg_1142_pp0_iter1_reg)) or ((ap_const_lv3_3 = aiFSMState_load_reg_1142_pp0_iter1_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_7_reg_1156_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            m_axis_icmp_TDATA_blk_n <= m_axis_icmp_TREADY_int_regslice;
        else 
            m_axis_icmp_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    m_axis_icmp_TDATA_int_regslice_assign_proc : process(aiFSMState_load_reg_1142, ap_predicate_op131_write_state2, tmp_15_reg_1160, p_Result_35_fu_1000_p5, ap_condition_276)
    begin
        if ((ap_const_boolean_1 = ap_condition_276)) then
            if ((ap_const_lv3_2 = aiFSMState_load_reg_1142)) then 
                m_axis_icmp_TDATA_int_regslice <= p_Result_35_fu_1000_p5;
            elsif ((ap_predicate_op131_write_state2 = ap_const_boolean_1)) then 
                m_axis_icmp_TDATA_int_regslice <= tmp_15_reg_1160;
            else 
                m_axis_icmp_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axis_icmp_TDATA_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axis_icmp_TKEEP_int_regslice_assign_proc : process(prevWord_keep_V, aiFSMState_load_reg_1142, ap_predicate_op131_write_state2, tmp_16_reg_1165, ap_condition_276)
    begin
        if ((ap_const_boolean_1 = ap_condition_276)) then
            if ((ap_const_lv3_2 = aiFSMState_load_reg_1142)) then 
                m_axis_icmp_TKEEP_int_regslice <= prevWord_keep_V;
            elsif ((ap_predicate_op131_write_state2 = ap_const_boolean_1)) then 
                m_axis_icmp_TKEEP_int_regslice <= tmp_16_reg_1165;
            else 
                m_axis_icmp_TKEEP_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axis_icmp_TKEEP_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axis_icmp_TLAST_int_regslice_assign_proc : process(aiFSMState_load_reg_1142, ap_predicate_op131_write_state2, tmp_8_reg_1151, tmp_19_reg_1175, ap_condition_276)
    begin
        if ((ap_const_boolean_1 = ap_condition_276)) then
            if ((ap_const_lv3_2 = aiFSMState_load_reg_1142)) then 
                m_axis_icmp_TLAST_int_regslice <= tmp_8_reg_1151;
            elsif ((ap_predicate_op131_write_state2 = ap_const_boolean_1)) then 
                m_axis_icmp_TLAST_int_regslice <= tmp_19_reg_1175;
            else 
                m_axis_icmp_TLAST_int_regslice <= "X";
            end if;
        else 
            m_axis_icmp_TLAST_int_regslice <= "X";
        end if; 
    end process;


    m_axis_icmp_TSTRB_int_regslice_assign_proc : process(prevWord_strb_V, aiFSMState_load_reg_1142, ap_predicate_op131_write_state2, tmp_17_reg_1170, ap_condition_276)
    begin
        if ((ap_const_boolean_1 = ap_condition_276)) then
            if ((ap_const_lv3_2 = aiFSMState_load_reg_1142)) then 
                m_axis_icmp_TSTRB_int_regslice <= prevWord_strb_V;
            elsif ((ap_predicate_op131_write_state2 = ap_const_boolean_1)) then 
                m_axis_icmp_TSTRB_int_regslice <= tmp_17_reg_1170;
            else 
                m_axis_icmp_TSTRB_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axis_icmp_TSTRB_int_regslice <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axis_icmp_TVALID <= regslice_both_m_axis_icmp_V_data_V_U_vld_out;

    m_axis_icmp_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, aiFSMState_load_reg_1142, ap_predicate_op131_write_state2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op131_write_state2 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv3_2 = aiFSMState_load_reg_1142)))) then 
            m_axis_icmp_TVALID_int_regslice <= ap_const_logic_1;
        else 
            m_axis_icmp_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    myIpAddress_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, aiFSMState_load_reg_1142, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv3_1 = aiFSMState_load_reg_1142)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            myIpAddress_0_ack_out <= ap_const_logic_1;
        else 
            myIpAddress_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_10_fu_356_p4 <= s_axis_icmp_TDATA_int_regslice(23 downto 16);
    p_Result_11_fu_366_p4 <= s_axis_icmp_TDATA_int_regslice(31 downto 24);
    p_Result_12_fu_384_p4 <= s_axis_icmp_TDATA_int_regslice(39 downto 32);
    p_Result_13_fu_394_p4 <= s_axis_icmp_TDATA_int_regslice(47 downto 40);
    p_Result_14_fu_412_p4 <= s_axis_icmp_TDATA_int_regslice(55 downto 48);
    p_Result_15_fu_422_p4 <= s_axis_icmp_TDATA_int_regslice(63 downto 56);
    p_Result_16_fu_440_p4 <= s_axis_icmp_TDATA_int_regslice(71 downto 64);
    p_Result_17_fu_450_p4 <= s_axis_icmp_TDATA_int_regslice(79 downto 72);
    p_Result_18_fu_468_p4 <= s_axis_icmp_TDATA_int_regslice(87 downto 80);
    p_Result_19_fu_478_p4 <= s_axis_icmp_TDATA_int_regslice(95 downto 88);
    p_Result_1_fu_860_p5 <= (prevWord_data_V(511 downto 72) & ap_const_lv8_80 & prevWord_data_V(63 downto 0));
    p_Result_20_fu_496_p4 <= s_axis_icmp_TDATA_int_regslice(103 downto 96);
    p_Result_21_fu_506_p4 <= s_axis_icmp_TDATA_int_regslice(111 downto 104);
    p_Result_22_fu_524_p4 <= s_axis_icmp_TDATA_int_regslice(119 downto 112);
    p_Result_23_fu_534_p4 <= s_axis_icmp_TDATA_int_regslice(127 downto 120);
    p_Result_24_fu_552_p4 <= s_axis_icmp_TDATA_int_regslice(135 downto 128);
    p_Result_25_fu_562_p4 <= s_axis_icmp_TDATA_int_regslice(143 downto 136);
    p_Result_26_fu_580_p4 <= s_axis_icmp_TDATA_int_regslice(151 downto 144);
    p_Result_27_fu_590_p4 <= s_axis_icmp_TDATA_int_regslice(159 downto 152);
    p_Result_2_fu_918_p4 <= prevWord_data_V(127 downto 96);
    p_Result_31_fu_648_p4 <= s_axis_icmp_TDATA_int_regslice(191 downto 184);
    p_Result_32_fu_658_p4 <= s_axis_icmp_TDATA_int_regslice(183 downto 176);
    p_Result_33_fu_1070_p4 <= ret_18_fu_1060_p2(19 downto 16);
    p_Result_34_fu_966_p5 <= (p_Result_7_fu_928_p5(511 downto 168) & ap_const_lv8_0 & p_Result_7_fu_928_p5(159 downto 0));
    p_Result_35_fu_1000_p5 <= (p_Result_34_fu_966_p5(511 downto 192) & tmp_1_fu_992_p3 & p_Result_34_fu_966_p5(175 downto 0));
    p_Result_3_fu_872_p5 <= (p_Result_1_fu_860_p5(511 downto 96) & ap_const_lv24_1 & p_Result_1_fu_860_p5(71 downto 0));
    p_Result_4_fu_884_p5 <= (p_Result_3_fu_872_p5(511 downto 96) & ap_const_lv16_0 & p_Result_3_fu_872_p5(79 downto 0));
    p_Result_5_fu_906_p5 <= (p_Result_4_fu_884_p5(511 downto 128) & p_Result_s_26_fu_896_p4 & p_Result_4_fu_884_p5(95 downto 0));
    p_Result_6_fu_978_p4 <= icmpChecksumTmp_V_fu_960_p2(15 downto 8);
    p_Result_7_fu_928_p5 <= (p_Result_5_fu_906_p5(511 downto 160) & p_Result_2_fu_918_p4 & p_Result_5_fu_906_p5(127 downto 0));
    p_Result_8_fu_944_p1 <= icmpChecksum_V(16 - 1 downto 0);
    p_Result_9_fu_338_p4 <= s_axis_icmp_TDATA_int_regslice(15 downto 8);
    p_Result_s_26_fu_896_p4 <= prevWord_data_V(159 downto 128);
    p_Result_s_fu_1110_p3 <= checksumL4_r_V_fu_1092_p2(16 downto 16);
    ret_10_fu_708_p2 <= std_logic_vector(unsigned(zext_ln225_1_fu_704_p1) + unsigned(zext_ln225_fu_700_p1));
    ret_11_fu_722_p2 <= std_logic_vector(unsigned(zext_ln225_3_fu_718_p1) + unsigned(zext_ln225_2_fu_714_p1));
    ret_12_fu_736_p2 <= std_logic_vector(unsigned(zext_ln225_5_fu_732_p1) + unsigned(zext_ln225_4_fu_728_p1));
    ret_13_fu_750_p2 <= std_logic_vector(unsigned(zext_ln225_7_fu_746_p1) + unsigned(zext_ln225_6_fu_742_p1));
    ret_14_fu_764_p2 <= std_logic_vector(unsigned(zext_ln225_9_fu_760_p1) + unsigned(zext_ln225_8_fu_756_p1));
    ret_15_fu_778_p2 <= std_logic_vector(unsigned(zext_ln225_11_fu_774_p1) + unsigned(zext_ln225_10_fu_770_p1));
    ret_16_fu_792_p2 <= std_logic_vector(unsigned(zext_ln225_13_fu_788_p1) + unsigned(zext_ln225_12_fu_784_p1));
    ret_17_fu_806_p2 <= std_logic_vector(unsigned(zext_ln225_15_fu_802_p1) + unsigned(zext_ln225_14_fu_798_p1));
    ret_18_fu_1060_p2 <= std_logic_vector(unsigned(zext_ln225_16_fu_1054_p1) + unsigned(zext_ln225_17_fu_1057_p1));

    s_axis_icmp_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, grp_nbreadreq_fu_212_p6, ap_sig_allocacmp_aiFSMState_load, s_axis_icmp_TVALID_int_regslice)
    begin
        if ((((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_3) and (grp_nbreadreq_fu_212_p6 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_4) and (grp_nbreadreq_fu_212_p6 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((grp_nbreadreq_fu_212_p6 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_sig_allocacmp_aiFSMState_load = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            s_axis_icmp_TDATA_blk_n <= s_axis_icmp_TVALID_int_regslice;
        else 
            s_axis_icmp_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    s_axis_icmp_TREADY <= regslice_both_s_axis_icmp_V_data_V_U_ack_in;

    s_axis_icmp_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_predicate_op12_read_state1, ap_predicate_op24_read_state1, ap_predicate_op38_read_state1, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op38_read_state1 = ap_const_boolean_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op24_read_state1 = ap_const_boolean_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op12_read_state1 = ap_const_boolean_1)))) then 
            s_axis_icmp_TREADY_int_regslice <= ap_const_logic_1;
        else 
            s_axis_icmp_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    select_ln170_fu_1040_p3 <= 
        ap_const_lv3_2 when (and_ln170_2_fu_1034_p2(0) = '1') else 
        ap_const_lv3_4;
    select_ln202_fu_308_p3 <= 
        ap_const_lv3_0 when (prevWord_last_V(0) = '1') else 
        ap_const_lv3_3;
    select_ln819_fu_1122_p3 <= 
        checksumL4_o_V_fu_1104_p2 when (p_Result_s_fu_1110_p3(0) = '1') else 
        trunc_ln649_fu_1118_p1;
    tmp_1_fu_992_p3 <= (trunc_ln674_fu_988_p1 & p_Result_6_fu_978_p4);
    tmp_2_fu_948_p3 <= icmpChecksum_V(16 downto 16);
    tmp_s_fu_668_p3 <= (p_Result_32_fu_658_p4 & p_Result_31_fu_648_p4);
    trunc_ln357_fu_1066_p1 <= ret_18_fu_1060_p2(16 - 1 downto 0);
    trunc_ln649_fu_1118_p1 <= checksumL4_r_V_fu_1092_p2(16 - 1 downto 0);
    trunc_ln674_1_fu_334_p1 <= s_axis_icmp_TDATA_int_regslice(8 - 1 downto 0);
    trunc_ln674_fu_988_p1 <= icmpChecksumTmp_V_fu_960_p2(8 - 1 downto 0);
    zext_ln217_1_fu_1084_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_33_fu_1070_p4),17));
    zext_ln217_2_fu_956_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_948_p3),16));
    zext_ln217_3_fu_1088_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_33_fu_1070_p4),16));
    zext_ln217_fu_1080_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln357_fu_1066_p1),17));
    zext_ln225_10_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_10_fu_708_p2),18));
    zext_ln225_11_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_11_fu_722_p2),18));
    zext_ln225_12_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_12_fu_736_p2),18));
    zext_ln225_13_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_13_fu_750_p2),18));
    zext_ln225_14_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_15_fu_778_p2),19));
    zext_ln225_15_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_16_fu_792_p2),19));
    zext_ln225_16_fu_1054_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_17_reg_1205),20));
    zext_ln225_17_fu_1057_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_14_reg_1200),20));
    zext_ln225_1_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL0_V_10_fu_572_p3),17));
    zext_ln225_2_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL0_V_11_fu_544_p3),17));
    zext_ln225_3_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL0_V_12_fu_516_p3),17));
    zext_ln225_4_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL0_V_13_fu_488_p3),17));
    zext_ln225_5_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL0_V_14_fu_460_p3),17));
    zext_ln225_6_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL0_V_15_fu_432_p3),17));
    zext_ln225_7_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL0_V_16_fu_404_p3),17));
    zext_ln225_8_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL0_V_17_fu_376_p3),17));
    zext_ln225_9_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL0_V_18_fu_348_p3),17));
    zext_ln225_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksumL0_V_fu_692_p3),17));
    zext_ln320_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_668_p3),17));
end behav;
